{"version":3,"sources":["components/CountDowns/StakingCountDown.js","services/yupValidations.js","components/CreateAntField/index.js","components/Buttons/ButtonSpin.js","components/Modals/ModalStaking.js","components/Tables/TableStaking.js","hooks/useEffectOnce.js","components/Collapse/CollapseStaking.js","hooks/useAmountTo1E18.js","views/StakingView.js","services/helpers.js","hooks/useResponsive.js","components/ReloadButton/ReloadDataButton.js"],"names":["Countdown","Statistic","onFinish","console","log","StakingCountDown","value","size","color","className","format","valueStyle","fontSize","lineHeight","SUPPORTED_FORMATS","regex","validations","Yup","min","max","matches","required","oneOf","test","validator","isAlphanumeric","email","lowercase","isAlpha","replace","includes","type","_v","parseFloat","s","Option","style","totalTokens","FormItem","Form","Item","Select","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","props","touched","name","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","AntInput","DatePicker","Input","Password","TimePicker","antIcon","LoadingOutlined","spin","ButtonSpin","loading","disabled","textLoading","children","restProps","indicator","Fragment","initialValues","stakingAmount","ModalStaking","index","title","visibleModal","onCloseModal","deposit","userTokens","loadingStaking","useResponsive","base","md","lg","xl","widthModal","tokens","toFixed","schema","visible","onCancel","width","maskClosable","footer","centered","validationSchema","onSubmit","values","resetForm","Number","isSubmitting","isValid","isInitialValid","useCurrency","component","placeholder","onClick","handleOnCloseModal","columns","dataIndex","key","ellipsis","customizeRenderEmpty","InboxOutlined","UnStake","cb","item","lockDuration","getReward","useSCInteractions","useState","setLoading","enableUnstake","setEnableUnstake","lockDurationEnd","today","Date","ends","getTime","useEffect","useInterval","res","err","TableStaking","stake","lokedTime","isStakeholder","userStakes","useListenCookie","theme","widthCell","data","reduce","acc","i","reward","date","stakeTime","toLocaleString","depositAmount","tokensLocked","deposit_date","deposit_amount","lock_duration","unStake","tableStyle","backgroundColor","padding","renderEmpty","pagination","v","dataSource","bordered","scroll","x","Panel","Collapse","HeaderPanel","info","APR","lockedTime","totalDeposit","active","duration","deadline","now","Math","ceil","HeaderPanelMobile","CollapseStaking","setVisibleModal","indexModal","setIndexModal","useWindowSize","useSCData","createStake","contractStakes","totalUserStakes","handleShowModal","amount","amountToStake","e","parseInt","toString","split","pow","Array","join","useAmountTo1E18","expandIcon","isActive","RightOutlined","rotate","expandIconPosition","header","role","StakingView","ReloadDataButton","cls","input","filter","cond","trim","escapeRegExp","string","temp","length","xxl","sm","setValue","useDeepCompareEffect","reloadData","fetchingData","fetching"],"mappings":"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","file":"static/js/9.c701b743.chunk.js","sourcesContent":["import { Statistic } from 'antd'\r\nimport { FaRegClock } from 'react-icons/fa'\r\nconst { Countdown } = Statistic\r\n\r\nfunction onFinish() {\r\n    console.log('finished!')\r\n}\r\n\r\nconst StakingCountDown = ({ value, size = '1.1rem', color = '#fff' }) => {\r\n    return (\r\n        <div className=\"flex flex-row justify-center items-center bg-benefits-blue-1 text-white px-3 border rounded-xl font-bold text-sm py-1\">\r\n            <FaRegClock className=\"mr-1\" size={size} color={color} />\r\n            <Countdown\r\n                className=\"text-xxs\"\r\n                value={value}\r\n                format=\"DD:HH:mm:ss\"\r\n                valueStyle={{\r\n                    fontSize: size,\r\n                    color,\r\n                    lineHeight: 0,\r\n                }}\r\n                onFinish={onFinish}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default StakingCountDown\r\n","import * as Yup from 'yup'\r\nimport validator from 'validator'\r\n\r\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\r\n\r\nconst FILE_SIZE = 100 * 1024\r\n\r\nexport const regex = {\r\n    alpha: /^[A-Za-z]+$/,\r\n    alphaNumeric: /[a-zA-Z0-9]/,\r\n    atLeastOneUpperCase: /[A-Z]/,\r\n    phoneNumber:\r\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\r\n    exact5: /^[0-9]{5}$/,\r\n}\r\n\r\nexport const validations = {\r\n    password: Yup.string()\r\n        .min(8, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .matches(\r\n            regex.atLeastOneUpperCase,\r\n            'Must contain al least one uppercase letter.'\r\n        )\r\n        .required('Required'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n        .required('Required'),\r\n    userName: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .test(\r\n            'alphaNumeric',\r\n            'Must contain only letters and numbers.',\r\n            (value) => value && validator.isAlphanumeric(value)\r\n        )\r\n        .required('Required'),\r\n    mail: Yup.string()\r\n        .max(64, 'Too Long!')\r\n        .email('Must be a valid email format. example@email.com')\r\n        .lowercase('Must contain only lower case')\r\n        .required('Required'),\r\n    phone: Yup.string()\r\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\r\n        .required('Required'),\r\n    name: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(30, 'Too Long!')\r\n        .test(\r\n            'alpha',\r\n            'Must contain only letters.',\r\n            (value) =>\r\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\r\n        ),\r\n    // .required('Required'),\r\n    birthDate: Yup.date().required('Required'),\r\n    country: Yup.string().required('Required'),\r\n    state: Yup.string().required('Required'),\r\n    city: Yup.string().required('Required'),\r\n    line: Yup.string().required('Required'),\r\n    postalCode: Yup.string()\r\n        .matches(regex.exact5, 'Must be exactly 5 digits')\r\n        .required('Required'),\r\n    file: Yup.mixed()\r\n        .required('A file is required')\r\n        .test(\r\n            'fileSize',\r\n            'File too large',\r\n            (value) => value && value[0].size <= FILE_SIZE\r\n        )\r\n        .test(\r\n            'fileFormat',\r\n            'Unsupported Format',\r\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\r\n        )\r\n        .required('Required'),\r\n    min20Usd: Yup.mixed()\r\n        .required('Required')\r\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\r\n            if (value) {\r\n                let _v = value\r\n                _v = _v.replace(/\\D/g, '')\r\n                _v = parseFloat(_v)\r\n                return _v >= 20.0\r\n            }\r\n            return false\r\n        }),\r\n    no0Usd: Yup.mixed()\r\n        .required('Required')\r\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\r\n            if (value) {\r\n                let _v = value\r\n                _v = parseFloat(_v)\r\n                return _v > 0.0\r\n            }\r\n            return false\r\n        }),\r\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\r\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\r\n    onlyNumber: Yup.mixed()\r\n        .required('Required')\r\n        .test('onlyNumber', 'Field must be a number', (value) => {\r\n            if (value) {\r\n                const _v = value\r\n                const isnum = /^\\d+$/.test(_v)\r\n\r\n                return isnum\r\n            }\r\n            return false\r\n        }),\r\n    isColor: Yup.mixed()\r\n        .required('Required')\r\n        .test(\r\n            'color',\r\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\r\n            (value) => {\r\n                if (value) {\r\n                    const s = new Option().style\r\n                    s.color = value\r\n                    return s.color !== ''\r\n                }\r\n                return false\r\n            }\r\n        ),\r\n    number: Yup.number().required('Required'),\r\n    array: Yup.array().required('Required'),\r\n    staking: (totalTokens) => {\r\n        return Yup.mixed()\r\n            .required('Required')\r\n            .test('onlyNumber', 'Field must be a number', (value) => {\r\n                if (value) {\r\n                    const _v = value\r\n                    const isnum = /^\\d+$/.test(_v)\r\n\r\n                    return isnum\r\n                }\r\n                return false\r\n            })\r\n            .test('minStake', 'Minimum to stake is 1', (value) => {\r\n                if (value) {\r\n                    let _v = value\r\n                    _v = _v.replace(/\\D/g, '')\r\n                    _v = parseFloat(_v)\r\n                    return _v >= 1.0\r\n                }\r\n                return false\r\n            })\r\n            .test('maxStake', 'Insufficient Balance', (value) => {\r\n                if (value) {\r\n                    let _v = value\r\n                    _v = _v.replace(/\\D/g, '')\r\n                    _v = parseFloat(_v)\r\n                    return _v <= parseFloat(totalTokens)\r\n                }\r\n                return false\r\n            })\r\n    },\r\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\r\n        return Yup.mixed()\r\n            .required('Required')\r\n            .test('validUserName', 'You can not add yourself', (value) => {\r\n                if (value) {\r\n                    if (\r\n                        value === currentUser.userName ||\r\n                        value === currentUser.userMail\r\n                    )\r\n                        return false\r\n                    return true\r\n                }\r\n                return false\r\n            })\r\n            .test(\r\n                'validateIsNotExistingMember',\r\n                'You can not add existing members',\r\n                (value) => {\r\n                    if (value) {\r\n                        let valid = true\r\n\r\n                        for (\r\n                            let index = 0;\r\n                            index < currentMembers.length;\r\n                            index++\r\n                        ) {\r\n                            const { userName, userMail } = currentMembers[index]\r\n                            if (value === userName || value === userMail) {\r\n                                valid = false\r\n                                break\r\n                            }\r\n                        }\r\n                        return valid\r\n                    }\r\n                    return false\r\n                }\r\n            )\r\n    },\r\n}\r\n","/* eslint-disable react/display-name */\r\nimport React from 'react'\r\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\r\n\r\nconst FormItem = Form.Item\r\nconst { Option } = Select\r\n\r\nconst CreateAntField =\r\n    (AntComponent) =>\r\n    ({\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }) => {\r\n        const touched = form.touched[field.name]\r\n        const submitted = submitCount > 0\r\n        const hasError = form.errors[field.name]\r\n        const submittedError = hasError && submitted\r\n        const touchedError = hasError && touched\r\n        const onInputChange = ({ target: { value } }) =>\r\n            form.setFieldValue(field.name, value)\r\n        const onChange = (value) => form.setFieldValue(field.name, value)\r\n        const onBlur = () => form.setFieldTouched(field.name, true)\r\n        return (\r\n            <FormItem\r\n                label={label}\r\n                hasFeedback={\r\n                    (hasFeedback && submitted) || (hasFeedback && touched)\r\n                }\r\n                help={submittedError || touchedError ? hasError : false}\r\n                validateStatus={\r\n                    submittedError || touchedError ? 'error' : 'success'\r\n                }\r\n            >\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((name) => (\r\n                            <Option key={name}>{name}</Option>\r\n                        ))}\r\n                </AntComponent>\r\n            </FormItem>\r\n        )\r\n    }\r\n\r\nexport const AntSelect = CreateAntField(Select)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\nexport const AntInput = CreateAntField(Input)\r\nexport const AntInputPassword = CreateAntField(Input.Password)\r\nexport const AntTimePicker = CreateAntField(TimePicker)\r\n","import React from 'react'\r\nimport { Spin } from 'antd'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\n\r\nconst antIcon = (\r\n    <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\r\n)\r\n\r\nconst ButtonSpin = ({\r\n    loading,\r\n    disabled,\r\n    textLoading,\r\n    children,\r\n    ...restProps\r\n}) => {\r\n    return (\r\n        <button\r\n            className=\" bg-primary text-lg px-12 py-2 rounded-md text-white disabled:opacity-50\"\r\n            disabled={disabled}\r\n            {...restProps}\r\n        >\r\n            {loading ? (\r\n                <span>\r\n                    <span className=\"pr-2\">\r\n                        <Spin indicator={antIcon} />\r\n                    </span>\r\n                    {textLoading}\r\n                </span>\r\n            ) : (\r\n                <React.Fragment> {children}</React.Fragment>\r\n            )}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonSpin\r\n","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Modal } from 'antd'\r\n// import InputStaking from '../Inputs/InputStaking'\r\nimport useResponsive from '../../hooks/useResponsive'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport { validations } from './../../services/yupValidations'\r\nimport { AntInput } from './../CreateAntField/index'\r\nimport ButtonSpin from '../Buttons/ButtonSpin'\r\n\r\nconst initialValues = {\r\n    stakingAmount: '',\r\n}\r\n\r\nconst ModalStaking = ({\r\n    index,\r\n    title,\r\n    visibleModal,\r\n    onCloseModal,\r\n    deposit,\r\n    userTokens,\r\n    loadingStaking,\r\n}) => {\r\n    // const [amount, setAmount] = useState(0)\r\n    const [widthModal] = useResponsive({\r\n        base: '100%',\r\n        md: '70%',\r\n        lg: '50%',\r\n        xl: '30%',\r\n    })\r\n    console.log({ userTokens })\r\n    userTokens = userTokens / 1e18\r\n    const tokens = userTokens.toFixed(0)\r\n\r\n    const schema = Yup.object({\r\n        stakingAmount: validations.staking(tokens),\r\n    })\r\n\r\n    const getDdot = () => {\r\n        console.log('get ddot')\r\n    }\r\n\r\n    const handleOnCloseModal = (resetForm) => {\r\n        // setAmount(0)\r\n        resetForm()\r\n        onCloseModal()\r\n    }\r\n\r\n    const handleSubmit = (values, { resetForm }) => {\r\n        // console.log(Number(values.stakingAmount))\r\n        deposit(Number(values.stakingAmount), index)\r\n        // handleOnCloseModal(resetForm)\r\n    }\r\n    return (\r\n        <Modal\r\n            title={title}\r\n            visible={visibleModal}\r\n            onCancel={onCloseModal}\r\n            width={widthModal}\r\n            deposit={deposit}\r\n            maskClosable={false}\r\n            footer={null}\r\n            centered\r\n        >\r\n            <Formik\r\n                // enableReinitialize\r\n                // validateOnMount={true}\r\n                validationSchema={schema}\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {({\r\n                    isSubmitting,\r\n                    values,\r\n                    setFieldValue,\r\n                    resetForm,\r\n                    isValid,\r\n                    isInitialValid,\r\n                }) => (\r\n                    <Form>\r\n                        <div className=\"mb-2\">\r\n                            <div className=\"flex justify-between items-center\">\r\n                                <p className=\"font-bold text-base\">Stake</p>\r\n                                <p className=\"font-bold text-base\">\r\n                                    Balance:{' '}\r\n                                    <span className=\"font-normal\">\r\n                                        {useCurrency(userTokens, 0)}\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"flex justify-between items-center\">\r\n                                <div className=\"  flex flex-row items-start\">\r\n                                    <div className=\"mr-2\">\r\n                                        <Field\r\n                                            component={AntInput}\r\n                                            name=\"stakingAmount\"\r\n                                            type=\"string\"\r\n                                            placeholder=\"\"\r\n                                            // hasFeedback\r\n                                            value={values?.stakingAmount}\r\n                                        />\r\n                                    </div>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"disabled:opacity-50 bg-primary rounded-md py-1 px-3 text-white text-base font-bold\"\r\n                                        onClick={() => {\r\n                                            setFieldValue(\r\n                                                'stakingAmount',\r\n                                                tokens\r\n                                            )\r\n                                        }}\r\n                                    >\r\n                                        MAX\r\n                                    </button>\r\n                                </div>\r\n                                <p className=\"text-2xl font-bold\">DDOT</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            {/* <div className=\"flex justify-between items-center mb-4\">\r\n                                <p className=\"text-base\">\r\n                                    Annual ROI at current rates:\r\n                                </p>\r\n                                <p className=\"text-base font-bold\">$0,00</p>\r\n                            </div> */}\r\n                            <div className=\"flex justify-around items-center mb-5\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"disabled:opacity-50 bg-transparent border-solid border border-primary rounded-md py-1 px-10 text-primary text-lg font-bold\"\r\n                                    disabled={loadingStaking}\r\n                                    onClick={() =>\r\n                                        handleOnCloseModal(resetForm)\r\n                                    }\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <ButtonSpin\r\n                                    type=\"submit\"\r\n                                    className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 px-10 text-white text-lg font-bold\"\r\n                                    disabled={!isValid || loadingStaking}\r\n                                    loading={loadingStaking}\r\n                                >\r\n                                    Confirm\r\n                                </ButtonSpin>\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <p\r\n                                    onClick={() => getDdot()}\r\n                                    className=\"font-bold text-xl text-primary cursor-pointer\"\r\n                                >\r\n                                    Get DDOT\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalStaking\r\n","import { useState } from 'react'\r\nimport { ConfigProvider, Table } from 'antd'\r\nimport { InboxOutlined } from '@ant-design/icons'\r\nimport useListenCookie from '../../hooks/useListenCookie'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport StakingCountDown from '../CountDowns/StakingCountDown'\r\nimport useInterval from './../../hooks/useInterval'\r\nimport useEffectOnce from './../../hooks/useEffectOnce'\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport ButtonSpin from '../Buttons/ButtonSpin'\r\nimport useResponsive from './../../hooks/useResponsive'\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Deposit date',\r\n        dataIndex: 'deposit_date',\r\n        key: 'deposit_date',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Deposit amount',\r\n        dataIndex: 'deposit_amount',\r\n        key: 'deposit_amount',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Reward',\r\n        dataIndex: 'reward',\r\n        key: 'reward',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Lock duration',\r\n        dataIndex: 'lock_duration',\r\n        key: 'lock_duration',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: '',\r\n        dataIndex: 'unStake',\r\n        key: 'unStake',\r\n        ellipsis: true,\r\n    },\r\n]\r\n\r\nconst customizeRenderEmpty = () => (\r\n    <div className=\"text-center\">\r\n        <InboxOutlined style={{ fontSize: 40 }} />\r\n        <p>No Data</p>\r\n    </div>\r\n)\r\n\r\nconst UnStake = ({ item, lockDuration }) => {\r\n    const { getReward } = useSCInteractions()\r\n    const [loading, setLoading] = useState(false)\r\n    const [enableUnstake, setEnableUnstake] = useState(false)\r\n\r\n    const lockDurationEnd = () => {\r\n        const today = new Date()\r\n        const ends = new Date(lockDuration)\r\n        setEnableUnstake(today.getTime() > ends.getTime())\r\n    }\r\n\r\n    useEffectOnce(() => {\r\n        lockDurationEnd()\r\n    })\r\n\r\n    useInterval(\r\n        () => {\r\n            lockDurationEnd()\r\n        },\r\n        !enableUnstake ? 500 : null\r\n    )\r\n\r\n    const handleUnstake = () => {\r\n        setLoading(true)\r\n        getReward(item, (res) => {\r\n            if (res?.err) {\r\n                console.log(res)\r\n            }\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex w-full\">\r\n            <ButtonSpin\r\n                onClick={handleUnstake}\r\n                className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 w-full md:w-8/12 text-white text-lg font-bold mx-auto\"\r\n                disabled={!enableUnstake || loading}\r\n                loading={loading}\r\n            >\r\n                Unstake\r\n            </ButtonSpin>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TableStaking = ({\r\n    stake,\r\n    lokedTime,\r\n    isStakeholder,\r\n    userStakes,\r\n    getReward,\r\n}) => {\r\n    const [theme] = useListenCookie('theme')\r\n    const [widthCell] = useResponsive({ base: 150, md: '100%' })\r\n\r\n    const data = userStakes.reduce((acc, item, i) => {\r\n        if (Number(item.type) === stake && item.reward != null) {\r\n            const date = new Date(item.stakeTime * 1000).toLocaleString('en-GB')\r\n            console.log({ date })\r\n            const depositAmount = item.tokensLocked / 1e18\r\n            const reward = (item.reward - item.tokensLocked) / 1e18\r\n            let lockDuration = Number(item.stakeTime) + Number(lokedTime)\r\n            lockDuration = lockDuration * 1000\r\n\r\n            return [\r\n                ...acc,\r\n                {\r\n                    key: i,\r\n                    deposit_date: date,\r\n                    deposit_amount: useCurrency(depositAmount, 0),\r\n                    reward: useCurrency(reward, 2),\r\n                    lock_duration: (\r\n                        <StakingCountDown\r\n                            value={lockDuration}\r\n                            size=\"1rem\"\r\n                            color=\"white\"\r\n                        />\r\n                    ),\r\n                    width: 100,\r\n                    unStake: (\r\n                        <UnStake\r\n                            item={i}\r\n                            getReward={getReward}\r\n                            lockDuration={lockDuration}\r\n                        />\r\n                    ),\r\n                },\r\n            ]\r\n        }\r\n        return acc\r\n    }, [])\r\n    const isDarkMode = theme === 'dark'\r\n    const tableStyle = isDarkMode\r\n        ? {\r\n              backgroundColor: '#24262d',\r\n              padding: '0px',\r\n          }\r\n        : {\r\n              backgroundColor: '#fafafa',\r\n              padding: '0px',\r\n          }\r\n\r\n    return (\r\n        <div className=\"table-info overflow-y-auto \">\r\n            {isStakeholder && (\r\n                <ConfigProvider renderEmpty={customizeRenderEmpty}>\r\n                    <Table\r\n                        style={tableStyle}\r\n                        pagination={false}\r\n                        columns={columns.reduce(\r\n                            (acc, v) => [...acc, { ...v, width: widthCell }],\r\n                            []\r\n                        )}\r\n                        dataSource={data}\r\n                        className={theme}\r\n                        bordered\r\n                        scroll={{ x: '100%' }}\r\n                    />\r\n                </ConfigProvider>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default TableStaking\r\n","import { useEffect } from 'react'\r\n\r\nexport default function useEffectOnce(cb) {\r\n    useEffect(cb, [])\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react'\r\nimport { Collapse } from 'antd'\r\nimport useAmountTo1E18 from '../../hooks/useAmountTo1E18'\r\nimport StakingCountDown from '../CountDowns/StakingCountDown'\r\nimport ModalStaking from '../Modals/ModalStaking'\r\nimport TableStaking from '../Tables/TableStaking'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport { RightOutlined } from '@ant-design/icons'\r\nimport { ImagotipoSVG } from '../../assets/svg/home'\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport useSCData from './../../hooks/scInteractions/useSCData'\r\nimport useWindowSize from './../../hooks/useWindowSize'\r\nimport useResponsive from './../../hooks/useResponsive'\r\nconst { Panel } = Collapse\r\n\r\nconst HeaderPanel = ({ info: { APR, lockedTime, totalDeposit, active } }) => {\r\n    totalDeposit = totalDeposit / 1e18\r\n    const duration = lockedTime * (1 / 86400)\r\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\r\n    return (\r\n        <div className=\"w-full flex flex-row justify-between items-center py-2\">\r\n            <div className=\" flex flex-row text-gray-13 dark:text-white items-center leading-none\">\r\n                <ImagotipoSVG className=\"w-9 mr-2 \" />\r\n                <span className=\"font-bold text-sm md:text-lg \">DDOT</span>\r\n            </div>\r\n            <div className=\" text-gray-13 dark:text-white  text-center flex flex-row items-center leading-none\">\r\n                <div className=\"font-light text-sm md:text-sm mr-1\">APR:</div>\r\n                <div className=\"font-bold text-xxs md:text-base\">{APR}%</div>\r\n            </div>\r\n            <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\r\n                <div className=\"font-light text-xs md:text-sm mr-1\">\r\n                    Total deposit:\r\n                </div>\r\n                <div className=\"font-bold text-xxs md:text-base\">\r\n                    {useCurrency(totalDeposit, 0)}\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"text-gray-13 dark:text-white\">\r\n                <p className=\"font-light text-lg\">Max cap</p>\r\n                <p className=\"font-bold text-base\">{}</p>\r\n            </div> */}\r\n            <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\r\n                <div className=\"font-light text-xs md:text-sm mr-1 \">\r\n                    Duration:\r\n                </div>\r\n                <div className=\"font-bold text-xxs md:text-base \">\r\n                    {Math.ceil(duration)} days\r\n                </div>\r\n            </div>\r\n            <div className=\" flex flex-row justify-center items-center leading-none\">\r\n                <div className=\"font-light text-sm md:text-sm text-gray-13 dark:text-white text-center mr-1\">\r\n                    Contract end time:\r\n                </div>\r\n                {active ? (\r\n                    <StakingCountDown value={deadline} size={'0.875rem'} />\r\n                ) : (\r\n                    <div className=\"bg-red-300 text-red-0 text-center rounded-md px-3 py-1  mx-auto font-medium text-xs md:text-sm \">\r\n                        Inactive\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst HeaderPanelMobile = ({\r\n    info: { APR, lockedTime, totalDeposit, active },\r\n}) => {\r\n    totalDeposit = totalDeposit / 1e18\r\n    const duration = lockedTime * (1 / 86400)\r\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\r\n    return (\r\n        <div className=\"w-full py-2\">\r\n            <div className=\"flex flex-row justify-between\">\r\n                <div className=\" flex flex-row text-gray-13 dark:text-white items-center leading-none\">\r\n                    <ImagotipoSVG className=\"w-9 mr-2 \" />\r\n                    <span className=\"font-bold text-sm \">DDOT</span>\r\n                </div>{' '}\r\n                <div className=\" flex flex-row justify-center items-center leading-none\">\r\n                    <div className=\"font-light text-xs text-gray-13 dark:text-white text-center mr-1\">\r\n                        Contract end time:\r\n                    </div>\r\n                    <div className=\"font-medium text-xs flex\">\r\n                        {active ? (\r\n                            <StakingCountDown\r\n                                value={deadline}\r\n                                size=\"1rem\"\r\n                                color=\"white\"\r\n                            />\r\n                        ) : (\r\n                            <div className=\"bg-red-1 text-red-0 text-center font-medium rounded-md px-3 py-2  mx-auto\">\r\n                                Inactive\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\" flex flex-row justify-between mt-4\">\r\n                <div className=\" text-gray-13 dark:text-white  text-center flex flex-row items-center leading-none\">\r\n                    <div className=\"font-light text-xs  mr-1\">APR:</div>\r\n                    <div className=\"font-bold text-sm \">{APR}%</div>\r\n                </div>\r\n                <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\r\n                    <div className=\"font-light text-xs  mr-1\">\r\n                        Total deposit:\r\n                    </div>\r\n                    <div className=\"font-bold text-sm\">\r\n                        {useCurrency(totalDeposit, 0)}\r\n                    </div>\r\n                </div>\r\n                <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\r\n                    <div className=\"font-light text-xs mr-1\">Duration:</div>\r\n                    <div className=\"font-bold text-sm\">{duration} days</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CollapseStaking = () => {\r\n    const [loadingStaking, setLoading] = useState(false)\r\n    const [visibleModal, setVisibleModal] = useState(false)\r\n    const [indexModal, setIndexModal] = useState(0)\r\n    const { width } = useWindowSize()\r\n    const { data } = useSCData()\r\n    const { createStake } = useSCInteractions()\r\n\r\n    const {\r\n        contractStakes,\r\n        userStakes,\r\n        userTokens,\r\n        isStakeholder,\r\n        totalUserStakes,\r\n    } = data\r\n    console.log({ userTokens })\r\n    const handleShowModal = (index) => {\r\n        setVisibleModal(!visibleModal)\r\n        setIndexModal(index)\r\n    }\r\n    const deposit = (amount, stake) => {\r\n        setLoading(true)\r\n        const amountToStake = useAmountTo1E18(amount)\r\n        createStake(amountToStake, stake, (res) => {\r\n            if (res?.err) {\r\n                console.log(res)\r\n            }\r\n            setLoading(false)\r\n            setVisibleModal(!visibleModal)\r\n        })\r\n    }\r\n\r\n    if (!contractStakes) return null\r\n    return (\r\n        <React.Fragment>\r\n            <ModalStaking\r\n                loadingStaking={loadingStaking}\r\n                index={indexModal}\r\n                title={'Stake tokens'}\r\n                visibleModal={visibleModal}\r\n                onCloseModal={handleShowModal}\r\n                deposit={deposit}\r\n                userTokens={userTokens}\r\n            />\r\n            {contractStakes.map((item, index) => {\r\n                return (\r\n                    <Collapse\r\n                        bordered={false}\r\n                        // collapsible=\"header\"\r\n                        expandIcon={({ isActive }) => (\r\n                            <RightOutlined\r\n                                className=\"text-gray-13 dark:text-white\"\r\n                                rotate={isActive ? 90 : 0}\r\n                            />\r\n                        )}\r\n                        expandIconPosition=\"right\"\r\n                        key={index}\r\n                        className=\"mb-3 rounded-xl dark:bg-gray-4\"\r\n                    >\r\n                        <Panel\r\n                            header={\r\n                                width > 425 ? (\r\n                                    <HeaderPanel info={item} />\r\n                                ) : (\r\n                                    <HeaderPanelMobile info={item} />\r\n                                )\r\n                            }\r\n                            key={index}\r\n                        >\r\n                            <div className=\"text-gray-13 dark:text-white border-t dark:border-gray-1 pt-4\">\r\n                                <div className=\"button-section text-right mb-4\">\r\n                                    {totalUserStakes >= 5 ? (\r\n                                        <div\r\n                                            className=\"alert alert-info\"\r\n                                            role=\"alert\"\r\n                                        >\r\n                                            You only can have 5 stakes\r\n                                        </div>\r\n                                    ) : (\r\n                                        <>\r\n                                            {userTokens > 0 ? (\r\n                                                <button\r\n                                                    onClick={() =>\r\n                                                        handleShowModal(index)\r\n                                                    }\r\n                                                    className=\"disabled:opacity-50 bg-primary text-white font-semibold border-none text-base px-6 py-2 rounded-md\"\r\n                                                    disabled={!item.active}\r\n                                                >\r\n                                                    Deposit\r\n                                                </button>\r\n                                            ) : (\r\n                                                <p>\r\n                                                    You need tokens to continue\r\n                                                </p>\r\n                                            )}\r\n                                        </>\r\n                                    )}\r\n                                </div>\r\n                                <TableStaking\r\n                                    stake={index}\r\n                                    lokedTime={item.lockedTime}\r\n                                    isStakeholder={isStakeholder}\r\n                                    userStakes={userStakes}\r\n                                />\r\n                            </div>\r\n                        </Panel>\r\n                    </Collapse>\r\n                )\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CollapseStaking\r\n","export default function useAmountTo1E18(x) {\r\n    let amount = 0\r\n    if (x < 1000) {\r\n        amount = x * 1e18\r\n    } else {\r\n        x = x * 1e18\r\n        let e = parseInt(x.toString().split('+')[1])\r\n        e -= 20\r\n        x /= Math.pow(10, e)\r\n        x += new Array(e + 1).join('0')\r\n        amount = x\r\n    }\r\n    return amount.toString()\r\n}\r\n","import React from 'react'\r\n// import { Row, Col } from 'antd'\r\nimport CollapseStaking from '../components/Collapse/CollapseStaking'\r\nimport ReloadDataButton from '../components/ReloadButton/ReloadDataButton'\r\n\r\nconst StakingView = (props) => {\r\n    return (\r\n        <div className=\"mx-5\">\r\n            <div className=\"max-w-1650px mx-auto\">\r\n                <div className=\"pb-8\">\r\n                    <div className=\"mb-6 mt-4 flex justify-end\">\r\n                        <ReloadDataButton />\r\n                    </div>\r\n\r\n                    <CollapseStaking />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StakingView\r\n","export const cls = (input) => {\n    return input\n        .replace(/\\s+/gm, ' ')\n        .split(' ')\n        .filter((cond) => typeof cond === 'string' && cond !== 'undefined')\n        .join(' ')\n        .trim()\n}\n\nexport const escapeRegExp = (string) => {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n","import { useState } from 'react'\r\nimport useWindowSize from './useWindowSize'\r\nimport useDeepCompareEffect from './useDeepCompareEffect'\r\n\r\nconst temp = (values) => {\r\n    for (let index = 0; index < values.length; index++) {\r\n        if (typeof values[index] !== 'undefined') {\r\n            return values[index]\r\n        }\r\n    }\r\n}\r\n\r\nconst useResponsive = ({ xxl, xl, lg, md, sm, base }) => {\r\n    const [value, setValue] = useState('')\r\n\r\n    const { width } = useWindowSize()\r\n    useDeepCompareEffect(() => {\r\n        if (width >= 1536) {\r\n            setValue(temp([xxl, xl, lg, md, sm, base]))\r\n        } else if (width >= 1280) {\r\n            setValue(temp([xl, lg, md, sm, base]))\r\n        } else if (width >= 1024) {\r\n            setValue(temp([lg, md, sm, base]))\r\n        } else if (width >= 768) {\r\n            setValue(temp([md, sm, base]))\r\n        } else if (width >= 640) {\r\n            setValue(temp([sm, base]))\r\n        } else {\r\n            setValue(base)\r\n        }\r\n    }, [width])\r\n    return [value]\r\n}\r\n\r\nexport default useResponsive\r\n","import React from 'react'\r\n// import { Spin } from 'antd'\r\n// import { LoadingOutlined } from '@ant-design/icons'\r\n\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport useSCData from './../../hooks/scInteractions/useSCData'\r\n// import ButtonSpinner from '../Buttons/ButtonSpinner'\r\nimport IconRefresh from './../../assets/svg/icons/IconRefresh'\r\nimport { cls } from './../../services/helpers'\r\n\r\n// const antIcon = (\r\n//     <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\r\n// )\r\n\r\nconst ReloadDataButton = () => {\r\n    const { reloadData } = useSCInteractions()\r\n    const { fetching: fetchingData } = useSCData()\r\n    return (\r\n        <button\r\n            disabled={fetchingData}\r\n            className=\"flex items-start justify-center\"\r\n            onClick={() => {\r\n                reloadData(true)\r\n            }}\r\n        >\r\n            <div className=\"h-8 w-8 lg:h-9 lg:w-9\">\r\n                <IconRefresh\r\n                    className={cls(`${fetchingData && 'animate-spin'}`)}\r\n                    size={'100%'}\r\n                />\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ReloadDataButton\r\n"],"sourceRoot":""}