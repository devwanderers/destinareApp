{"version":3,"sources":["hooks/useValidate.js","views/PresaleView.js","hooks/scInteractions/preSaleHook.js"],"names":["useValidate","params","useState","valid","setValid","useEffect","length","_valid","reduce","acc","p","PrivateSaleView","history","useHistory","account","useWeb3React","useSCData","fetchedData","data","visible","setVisible","selectedPlan","setPlan","setPaying","planCompromised","setPlanCompromised","alreadyRequest","useAlreadyRequestWhitelist","whitelist","useWhiteList","fetchWhiteList","useFetchWhiteList","useFetchingWhiteList","buyPreSale","whiteList","useActiveWeb3React","library","useCallback","plan","callback","a","contract","eth","Contract","DestinareContract","process","methods","buyPreSaleTokens","packageId","send","from","value","amount","then","res","tx","console","log","undefined","_err","err","useBuyPreSale","updateWhitelist","useUpdateWhitelist","useDeepCompareEffect","package","_selectedPackage","stakingLvlsPre","find","s","packagePreSale","className","style","height","PageLoading","ModalCompromisePackage","onClose","reset","saleType","Fragment","CardReservePlan","title","subtitle","properties","onClick","privateSale","push","InvestPath","message","to","transactionHash","preSale","Date","getTime","paid","map","CardCompromisePlan","handleSelectPackage","verified","CardContainer","FormPrivateSale"],"mappings":"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","file":"static/js/16.ad73bf43.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst useValidate = (params = []) => {\r\n    const [valid, setValid] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (params.length > 0) {\r\n            const _valid = params.reduce((acc, p) => {\r\n                if (acc) return acc\r\n                return p\r\n            }, false)\r\n            setValid(_valid)\r\n        }\r\n    }, [params])\r\n\r\n    return valid\r\n}\r\n\r\nexport default useValidate\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState, useEffect } from 'react'\r\nimport CardContainer from '../components/Cards/CardContainer'\r\nimport FormPrivateSale from '../components/PrivateSale/FormPrivateSale'\r\nimport { useSCData } from '../store/reducers/scInteractionReducer/hooks'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTimeout from './../hooks/useTimeout'\r\nimport {\r\n    useAlreadyRequestWhitelist,\r\n    useWhiteList,\r\n    useFetchWhiteList,\r\n    useFetchingWhiteList,\r\n    useUpdateWhitelist,\r\n} from './../store/reducers/whitelist/hooks'\r\nimport useDebounce from './../hooks/useDebounce'\r\nimport ModalCompromisePackage from '../components/PrivateSale/ModalCompromisePackage'\r\nimport CardCompromisePlan from '../components/PrivateSale/CardCompromisePlan'\r\nimport CardReservePlan from './../components/PrivateSale/CardReservePlan'\r\nimport useDeepCompareEffect from './../hooks/useDeepCompareEffect'\r\nimport PageLoading from '../components/PageLoadings/PageLoading'\r\nimport { useBuyPrivateSale } from '../hooks/scInteractions/privateSaleHooks'\r\nimport useValidate from './../hooks/useValidate'\r\nimport { useHistory } from 'react-router'\r\nimport { InvestPath } from './../constants/routerConstants'\r\nimport { useBuyPreSale } from '../hooks/scInteractions/preSaleHook'\r\nimport { stakingLvlsPre } from '../constants/stakingLevels'\r\n\r\nconst PrivateSaleView = () => {\r\n    const history = useHistory()\r\n    const { account } = useWeb3React()\r\n    const { fetchedData, data } = useSCData()\r\n    const [verified, setVerified] = useState(false)\r\n    const [visible, setVisible] = useState(false)\r\n    const [selectedPlan, setPlan] = useState(null)\r\n    const [paying, setPaying] = useState(false)\r\n    const [planCompromised, setPlanCompromised] = useState(null)\r\n\r\n    const alreadyRequest = useAlreadyRequestWhitelist()\r\n    const whitelist = useWhiteList()\r\n    const fetchWhiteList = useFetchWhiteList()\r\n\r\n    const {\r\n        whiteList: fetchingWhiteList,\r\n        alreadyRequest: fetchingAlreadyRequest,\r\n    } = useFetchingWhiteList()\r\n\r\n    const buyPreSale = useBuyPreSale()\r\n    const updateWhitelist = useUpdateWhitelist()\r\n\r\n    useDeepCompareEffect(() => {\r\n        if (whitelist.package !== 0) {\r\n            const _selectedPackage = stakingLvlsPre.find(\r\n                (s) => s.packageId === whitelist.packagePreSale\r\n            )\r\n            if (_selectedPackage) setPlanCompromised(_selectedPackage)\r\n        }\r\n    }, [whitelist])\r\n\r\n    const handleSelectPackage = (data) => {\r\n        setVisible(true)\r\n        setPlan(data)\r\n    }\r\n\r\n    const handleOnCloseModal = (reset = true) => {\r\n        setVisible(false)\r\n        if (reset) setPlan(null)\r\n    }\r\n\r\n    const handlePayPlan = () => {\r\n        if (whitelist.privateSale.length > 0) {\r\n            history.push(InvestPath)\r\n        } else {\r\n            setPaying(true)\r\n            buyPreSale(planCompromised, async (err, message, data) => {\r\n                if (err) {\r\n                    setPaying(false)\r\n                    console.log({ err })\r\n                } else {\r\n                    const { from, to, transactionHash } = data\r\n\r\n                    await updateWhitelist({\r\n                        preSale: [\r\n                            new Date().getTime(),\r\n                            from,\r\n                            to,\r\n                            transactionHash,\r\n                            planCompromised.amount,\r\n                        ],\r\n                    })\r\n\r\n                    history.push(InvestPath)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const loadingPage = useValidate([\r\n        !account,\r\n        !fetchWhiteList.alreadyRequest,\r\n        fetchWhiteList.alreadyRequest &&\r\n            alreadyRequest &&\r\n            !fetchWhiteList.whiteList,\r\n    ])\r\n\r\n    if (loadingPage) {\r\n        return (\r\n            <div className=\"mx-5\" style={{ height: 'calc(100vh - 109.13px)' }}>\r\n                <PageLoading />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"mx-5\" style={{ height: 'calc(100vh - 109.13px)' }}>\r\n            <ModalCompromisePackage\r\n                visible={visible}\r\n                onClose={handleOnCloseModal}\r\n                saleType=\"presale\"\r\n                {...selectedPlan}\r\n            />\r\n            <div className=\"max-w-960px mx-auto mt-12\">\r\n                {!alreadyRequest ? (\r\n                    <CardContainer className=\"px-12 pt-8 pb-6\">\r\n                        <FormPrivateSale account={account} />\r\n                    </CardContainer>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        {!planCompromised ? (\r\n                            <div className=\"grid grid-cols-3 gap-4\">\r\n                                {stakingLvlsPre.map((s) => {\r\n                                    const {\r\n                                        title,\r\n                                        subtitle,\r\n                                        properties,\r\n                                        packageId,\r\n                                    } = s\r\n                                    return (\r\n                                        <CardCompromisePlan\r\n                                            key={`package-${title}`}\r\n                                            title={title}\r\n                                            subtitle={subtitle}\r\n                                            properties={properties}\r\n                                            onClick={() =>\r\n                                                handleSelectPackage(s)\r\n                                            }\r\n                                            verified={whitelist.verified}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"w-11/12 md:w-5/12 lg:w-4/12 mx-auto\">\r\n                                <CardReservePlan\r\n                                    title={planCompromised.title}\r\n                                    subtitle={planCompromised.subtitle}\r\n                                    properties={planCompromised.properties}\r\n                                    onClick={handlePayPlan}\r\n                                    paid={whitelist.preSale.length > 0}\r\n                                    // lock\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrivateSaleView\r\n","/* eslint-disable no-unused-vars */\r\nimport { useCallback } from 'react'\r\nimport useActiveWeb3React from '../useActiveWeb3React'\r\nimport DestinareContract from '../../abi/DestinareContract.json'\r\n\r\nexport const useClaimPreSale = () => {\r\n    const { library, account } = useActiveWeb3React()\r\n\r\n    return useCallback(\r\n        async (callback) => {\r\n            try {\r\n                const contract = new library.eth.Contract(\r\n                    DestinareContract,\r\n                    process.env.REACT_APP_DESTINARE_CONTRACT_ADDRESS\r\n                )\r\n            } catch (err) {\r\n                if (typeof callback === 'function') {\r\n                    const _err = { err }\r\n                    callback(_err)\r\n                }\r\n            }\r\n        },\r\n        [library, account]\r\n    )\r\n}\r\n\r\nexport const useBuyPreSale = () => {\r\n    const { library, account } = useActiveWeb3React()\r\n    return useCallback(\r\n        async (plan, callback) => {\r\n            try {\r\n                const contract = new library.eth.Contract(\r\n                    DestinareContract,\r\n                    process.env.REACT_APP_DESTINARE_CONTRACT_ADDRESS\r\n                )\r\n                const tx = await contract.methods\r\n                    .buyPreSaleTokens(plan.packageId)\r\n                    .send({\r\n                        from: account,\r\n                        value: plan.amount * 1e18,\r\n                    })\r\n                    .then((res) => res)\r\n                console.log('buy presale Tokens', tx)\r\n                if (typeof callback === 'function') {\r\n                    const message = 'Tokens were successfully purchased'\r\n                    callback(undefined, message, tx)\r\n                }\r\n            } catch (err) {\r\n                if (typeof callback === 'function') {\r\n                    const _err = { err }\r\n                    callback(_err)\r\n                }\r\n            }\r\n        },\r\n        [library, account]\r\n    )\r\n}\r\n"],"sourceRoot":""}