{"version":3,"sources":["components/ReloadButton/ReloadDataButton.js","components/CountDowns/StakingCountDown.js","hooks/useResponsive.js","components/Buttons/ButtonSpin.js","components/Modals/ModalStaking.js","components/Tables/TableStaking.js","hooks/useEffectOnce.js","components/Collapse/CollapseStaking.js","hooks/useAmountTo1E18.js","views/StakingView.js","services/yupValidations.js","components/CreateAntField/index.js"],"names":["antIcon","className","style","fontSize","spin","ReloadDataButton","reloadData","useSCInteractions","fetchingData","useSCData","fetching","onClick","console","log","disabled","indicator","Countdown","Statistic","onFinish","StakingCountDown","value","valueStyle","size","marginRight","color","format","temp","values","index","length","useResponsive","xxl","xl","lg","md","sm","base","useState","setValue","width","useWindowSize","useDeepCompareEffect","LoadingOutlined","ButtonSpin","loading","textLoading","children","restProps","Fragment","initialValues","stakingAmount","ModalStaking","title","visibleModal","onCloseModal","deposit","totalTokens","loadingStaking","widthModal","tokens","toFixed","schema","Yup","validations","staking","visible","onCancel","maskClosable","footer","centered","validationSchema","onSubmit","resetForm","Number","isSubmitting","setFieldValue","isValid","isInitialValid","useCurrency","component","AntInput","name","type","placeholder","handleOnCloseModal","columns","dataIndex","key","ellipsis","customizeRenderEmpty","InboxOutlined","UnStake","cb","item","lockDuration","getReward","setLoading","enableUnstake","setEnableUnstake","lockDurationEnd","today","Date","toLocaleString","ends","useEffect","useInterval","res","err","TableStaking","stake","lokedTime","isStakeholder","userStakes","useListenCookie","theme","data","reduce","acc","i","reward","date","stakeTime","depositAmount","tokensLocked","deposit_date","deposit_amount","lock_duration","unStake","tableStyle","backgroundColor","padding","renderEmpty","pagination","dataSource","bordered","Panel","Collapse","HeaderPanel","info","APR","lockedTime","totalDeposit","active","duration","deadline","now","CollapseStaking","setVisibleModal","indexModal","setIndexModal","createStake","contractStakes","userTokens","totalUserStakes","handleShowModal","amount","amountToStake","x","e","parseInt","toString","split","Math","pow","Array","join","useAmountTo1E18","map","expandIcon","isActive","RightOutlined","rotate","expandIconPosition","header","role","StakingView","props","SUPPORTED_FORMATS","regex","password","min","max","matches","required","passwordConfirmation","oneOf","userName","test","validator","isAlphanumeric","mail","email","lowercase","phone","isAlpha","replace","birthDate","country","state","city","line","postalCode","file","includes","min20Usd","_v","parseFloat","no0Usd","generic","boolean","onlyNumber","isColor","s","Option","number","array","validateIsNotCurrentUser","currentUser","currentMembers","userMail","valid","FormItem","Form","Item","Select","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","touched","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","DatePicker","Input","AntInputPassword","Password","TimePicker"],"mappings":"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","file":"static/js/12.17e41239.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Spin } from 'antd'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\n\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport useSCData from './../../hooks/scInteractions/useSCData'\r\n\r\nconst antIcon = (\r\n    <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\r\n)\r\n\r\nconst ReloadDataButton = () => {\r\n    const { reloadData } = useSCInteractions()\r\n    const { fetching: fetchingData } = useSCData()\r\n    return (\r\n        <button\r\n            className=\" bg-primary text-lg px-12 py-2 rounded-md text-white disabled:opacity-50\"\r\n            onClick={() => {\r\n                console.log('Entro')\r\n                reloadData(true)\r\n            }}\r\n            disabled={fetchingData}\r\n        >\r\n            {fetchingData ? (\r\n                <span>\r\n                    <span className=\"pr-2\">\r\n                        <Spin indicator={antIcon} />\r\n                    </span>\r\n                    Refreshing\r\n                </span>\r\n            ) : (\r\n                'Refresh'\r\n            )}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ReloadDataButton\r\n","import { Statistic } from 'antd'\nimport { FaRegClock } from 'react-icons/fa'\nconst { Countdown } = Statistic\n\nfunction onFinish() {\n    console.log('finished!')\n}\n\nconst StakingCountDown = ({ value, valueStyle }) => {\n    return (\n        <div className=\"flex\">\n            <div className=\"flex flex-wrap justify-center items-center bg-benefits-blue-1 text-white px-3 border rounded-xl font-bold\">\n                <FaRegClock\n                    size={17}\n                    style={{ marginRight: '10px', color: 'white' }}\n                />\n                <Countdown\n                    value={value}\n                    format=\"DD:HH:mm:ss\"\n                    valueStyle={valueStyle}\n                    onFinish={onFinish}\n                />\n            </div>\n        </div>\n    )\n}\nexport default StakingCountDown\n","import { useState } from 'react'\r\nimport useWindowSize from './useWindowSize'\r\nimport useDeepCompareEffect from './useDeepCompareEffect'\r\n\r\nconst temp = (values) => {\r\n    for (let index = 0; index < values.length; index++) {\r\n        if (typeof values[index] !== 'undefined') {\r\n            return values[index]\r\n        }\r\n    }\r\n}\r\n\r\nconst useResponsive = ({ xxl, xl, lg, md, sm, base }) => {\r\n    const [value, setValue] = useState('')\r\n\r\n    const { width } = useWindowSize()\r\n    useDeepCompareEffect(() => {\r\n        if (width >= 1536) {\r\n            setValue(temp([xxl, xl, lg, md, sm, base]))\r\n        } else if (width >= 1280) {\r\n            setValue(temp([xl, lg, md, sm, base]))\r\n        } else if (width >= 1024) {\r\n            setValue(temp([lg, md, sm, base]))\r\n        } else if (width >= 768) {\r\n            setValue(temp([md, sm, base]))\r\n        } else if (width >= 640) {\r\n            setValue(temp([sm, base]))\r\n        } else {\r\n            setValue(base)\r\n        }\r\n    }, [width])\r\n    return [value]\r\n}\r\n\r\nexport default useResponsive\r\n","import React from 'react'\r\nimport { Spin } from 'antd'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\n\r\nconst antIcon = (\r\n    <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\r\n)\r\n\r\nconst ButtonSpin = ({ loading, textLoading, children, ...restProps }) => {\r\n    return (\r\n        <button\r\n            className=\" bg-primary text-lg px-12 py-2 rounded-md text-white disabled:opacity-50\"\r\n            disabled={loading}\r\n            {...restProps}\r\n        >\r\n            {loading ? (\r\n                <span>\r\n                    <span className=\"pr-2\">\r\n                        <Spin indicator={antIcon} />\r\n                    </span>\r\n                    {textLoading}\r\n                </span>\r\n            ) : (\r\n                <React.Fragment> {children}</React.Fragment>\r\n            )}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonSpin\r\n","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Modal } from 'antd'\r\n// import InputStaking from '../Inputs/InputStaking'\r\nimport useResponsive from '../../hooks/useResponsive'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport { validations } from './../../services/yupValidations'\r\nimport { AntInput } from './../CreateAntField/index'\r\nimport ButtonSpin from '../Buttons/ButtonSpin'\r\n\r\nconst initialValues = {\r\n    stakingAmount: '',\r\n}\r\n\r\nconst ModalStaking = ({\r\n    index,\r\n    title,\r\n    visibleModal,\r\n    onCloseModal,\r\n    deposit,\r\n    totalTokens,\r\n    loadingStaking,\r\n}) => {\r\n    // const [amount, setAmount] = useState(0)\r\n    const [widthModal] = useResponsive({\r\n        base: '100%',\r\n        md: '70%',\r\n        lg: '50%',\r\n        xl: '30%',\r\n    })\r\n    totalTokens = totalTokens / 1e18\r\n    const tokens = totalTokens.toFixed(0)\r\n\r\n    const schema = Yup.object({\r\n        stakingAmount: validations.staking(tokens),\r\n    })\r\n\r\n    const getDdot = () => {\r\n        console.log('get ddot')\r\n    }\r\n\r\n    const handleOnCloseModal = (resetForm) => {\r\n        // setAmount(0)\r\n        resetForm()\r\n        onCloseModal()\r\n    }\r\n\r\n    const handleSubmit = (values, { resetForm }) => {\r\n        // console.log(Number(values.stakingAmount))\r\n        deposit(Number(values.stakingAmount), index)\r\n        // handleOnCloseModal(resetForm)\r\n    }\r\n    return (\r\n        <Modal\r\n            title={title}\r\n            visible={visibleModal}\r\n            onCancel={onCloseModal}\r\n            width={widthModal}\r\n            deposit={deposit}\r\n            maskClosable={false}\r\n            footer={null}\r\n            centered\r\n        >\r\n            <Formik\r\n                // enableReinitialize\r\n                // validateOnMount={true}\r\n                validationSchema={schema}\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {({\r\n                    isSubmitting,\r\n                    values,\r\n                    setFieldValue,\r\n                    resetForm,\r\n                    isValid,\r\n                    isInitialValid,\r\n                }) => (\r\n                    <Form>\r\n                        <div className=\"mb-2\">\r\n                            <div className=\"flex justify-between items-center\">\r\n                                <p className=\"font-bold text-base\">Stake</p>\r\n                                <p className=\"font-bold text-base\">\r\n                                    Balance:{' '}\r\n                                    <span className=\"font-normal\">\r\n                                        {useCurrency(totalTokens, 0)}\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"flex justify-between items-center\">\r\n                                <div className=\"  flex flex-row items-start\">\r\n                                    <div className=\"mr-2\">\r\n                                        <Field\r\n                                            component={AntInput}\r\n                                            name=\"stakingAmount\"\r\n                                            type=\"string\"\r\n                                            placeholder=\"\"\r\n                                            // hasFeedback\r\n                                            value={values?.stakingAmount}\r\n                                        />\r\n                                    </div>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"disabled:opacity-50 bg-primary rounded-md py-1 px-3 text-white text-base font-bold\"\r\n                                        onClick={() => {\r\n                                            setFieldValue(\r\n                                                'stakingAmount',\r\n                                                tokens\r\n                                            )\r\n                                        }}\r\n                                    >\r\n                                        MAX\r\n                                    </button>\r\n                                </div>\r\n                                <p className=\"text-2xl font-bold\">DDOT</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            {/* <div className=\"flex justify-between items-center mb-4\">\r\n                                <p className=\"text-base\">\r\n                                    Annual ROI at current rates:\r\n                                </p>\r\n                                <p className=\"text-base font-bold\">$0,00</p>\r\n                            </div> */}\r\n                            <div className=\"flex justify-around items-center mb-5\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"disabled:opacity-50 bg-transparent border-solid border border-primary rounded-md py-1 px-10 text-primary text-lg font-bold\"\r\n                                    disabled={loadingStaking}\r\n                                    onClick={() =>\r\n                                        handleOnCloseModal(resetForm)\r\n                                    }\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                                <ButtonSpin\r\n                                    type=\"submit\"\r\n                                    className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 px-10 text-white text-lg font-bold\"\r\n                                    disabled={!isValid || loadingStaking}\r\n                                    loading={loadingStaking}\r\n                                >\r\n                                    Confirm\r\n                                </ButtonSpin>\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <p\r\n                                    onClick={() => getDdot()}\r\n                                    className=\"font-bold text-xl text-primary cursor-pointer\"\r\n                                >\r\n                                    Get DDOT\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalStaking\r\n","import { useState } from 'react'\r\nimport { ConfigProvider, Table } from 'antd'\r\nimport { InboxOutlined } from '@ant-design/icons'\r\nimport useListenCookie from '../../hooks/useListenCookie'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport StakingCountDown from '../CountDowns/StakingCountDown'\r\nimport useInterval from './../../hooks/useInterval'\r\nimport useEffectOnce from './../../hooks/useEffectOnce'\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport ButtonSpin from '../Buttons/ButtonSpin'\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Deposit date',\r\n        dataIndex: 'deposit_date',\r\n        key: 'deposit_date',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Deposit amount',\r\n        dataIndex: 'deposit_amount',\r\n        key: 'deposit_amount',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Reward',\r\n        dataIndex: 'reward',\r\n        key: 'reward',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Lock duration',\r\n        dataIndex: 'lock_duration',\r\n        key: 'lock_duration',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: '',\r\n        dataIndex: 'unStake',\r\n        key: 'unStake',\r\n        ellipsis: true,\r\n    },\r\n]\r\n\r\nconst customizeRenderEmpty = () => (\r\n    <div className=\"text-center\">\r\n        <InboxOutlined style={{ fontSize: 40 }} />\r\n        <p>No Data</p>\r\n    </div>\r\n)\r\n\r\nconst UnStake = ({ item, lockDuration }) => {\r\n    const { getReward } = useSCInteractions()\r\n    const [loading, setLoading] = useState(false)\r\n    const [enableUnstake, setEnableUnstake] = useState(false)\r\n\r\n    const lockDurationEnd = () => {\r\n        const today = new Date().toLocaleString('en-GB')\r\n        const ends = new Date(lockDuration).toLocaleString('en-GB')\r\n        setEnableUnstake(today > ends)\r\n    }\r\n\r\n    useEffectOnce(() => {\r\n        lockDurationEnd()\r\n    })\r\n\r\n    useInterval(\r\n        () => {\r\n            lockDurationEnd()\r\n        },\r\n        !enableUnstake ? 500 : null\r\n    )\r\n\r\n    const handleUnstake = () => {\r\n        setLoading(true)\r\n        getReward(item, (res) => {\r\n            if (res?.err) {\r\n                console.log(res)\r\n            }\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ButtonSpin\r\n            onClick={handleUnstake}\r\n            className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 px-10 text-white text-lg font-bold\"\r\n            disabled={!enableUnstake || loading}\r\n            loading={loading}\r\n        >\r\n            Unstake\r\n        </ButtonSpin>\r\n    )\r\n}\r\n\r\nconst TableStaking = ({\r\n    stake,\r\n    lokedTime,\r\n    isStakeholder,\r\n    userStakes,\r\n    getReward,\r\n}) => {\r\n    const [theme] = useListenCookie('theme')\r\n    const data = userStakes.reduce((acc, item, i) => {\r\n        if (Number(item.type) === stake && item.reward != null) {\r\n            const date = new Date(item.stakeTime * 1000).toLocaleString('en-GB')\r\n            const depositAmount = item.tokensLocked / 1e18\r\n            const reward = (item.reward - item.tokensLocked) / 1e18\r\n            let lockDuration = Number(item.stakeTime) + Number(lokedTime)\r\n            lockDuration = lockDuration * 1000\r\n\r\n            return [\r\n                ...acc,\r\n                {\r\n                    key: i,\r\n                    deposit_date: date,\r\n                    deposit_amount: useCurrency(depositAmount, 0),\r\n                    reward: useCurrency(reward, 2),\r\n                    lock_duration: (\r\n                        <StakingCountDown\r\n                            value={lockDuration}\r\n                            valueStyle={{ fontSize: '1.1rem', color: 'white' }}\r\n                        />\r\n                    ),\r\n                    unStake: (\r\n                        <UnStake\r\n                            item={i}\r\n                            getReward={getReward}\r\n                            lockDuration={lockDuration}\r\n                        />\r\n                    ),\r\n                },\r\n            ]\r\n        }\r\n        return acc\r\n    }, [])\r\n    const isDarkMode = theme === 'dark'\r\n    const tableStyle = isDarkMode\r\n        ? {\r\n              backgroundColor: '#24262d',\r\n              padding: '0px',\r\n          }\r\n        : {\r\n              backgroundColor: '#fafafa',\r\n              padding: '0px',\r\n          }\r\n\r\n    return (\r\n        <div className=\"table-info\">\r\n            {isStakeholder && (\r\n                <ConfigProvider renderEmpty={customizeRenderEmpty}>\r\n                    <Table\r\n                        style={tableStyle}\r\n                        pagination={false}\r\n                        columns={columns}\r\n                        dataSource={data}\r\n                        className={theme}\r\n                        bordered\r\n                    />\r\n                </ConfigProvider>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default TableStaking\r\n","import { useEffect } from 'react'\r\n\r\nexport default function useEffectOnce(cb) {\r\n    useEffect(cb, [])\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Collapse } from 'antd'\r\nimport useAmountTo1E18 from '../../hooks/useAmountTo1E18'\r\nimport StakingCountDown from '../CountDowns/StakingCountDown'\r\nimport ModalStaking from '../Modals/ModalStaking'\r\nimport TableStaking from '../Tables/TableStaking'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport { RightOutlined } from '@ant-design/icons'\r\nimport { ImagotipoSVG } from '../../assets/svg/home'\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport useSCData from './../../hooks/scInteractions/useSCData'\r\nconst { Panel } = Collapse\r\n\r\nconst HeaderPanel = ({ info: { APR, lockedTime, totalDeposit, active } }) => {\r\n    totalDeposit = totalDeposit / 1e18\r\n    const duration = lockedTime * (1 / 86400)\r\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\r\n    return (\r\n        <div className=\"w-full flex justify-between flex-wrap content-center contractStakes-center mr-10\">\r\n            <div className=\"grid grid-cols-2 gap-1 text-gray-13 dark:text-white\">\r\n                <ImagotipoSVG className=\"w-9\" />\r\n                <span className=\"font-bold text-lg\">DDOT</span>\r\n            </div>\r\n            <div className=\"text-gray-13 dark:text-white\">\r\n                <p className=\"font-light text-lg\">APR</p>\r\n                <p className=\"font-bold text-base\">{APR}%</p>\r\n            </div>\r\n            <div className=\"text-gray-13 dark:text-white\">\r\n                <p className=\"font-light text-lg\">Total deposit</p>\r\n                <p className=\"font-bold text-base\">\r\n                    {useCurrency(totalDeposit, 0)}\r\n                </p>\r\n            </div>\r\n            {/* <div className=\"text-gray-13 dark:text-white\">\r\n                <p className=\"font-light text-lg\">Max cap</p>\r\n                <p className=\"font-bold text-base\">{}</p>\r\n            </div> */}\r\n            <div className=\"text-gray-13 dark:text-white\">\r\n                <p className=\"font-light text-lg\">Duration</p>\r\n                <p className=\"font-bold text-base\">{duration} days</p>\r\n            </div>\r\n            <div className=\"\">\r\n                <p className=\"font-light text-lg text-gray-13 dark:text-white\">\r\n                    Contract end time\r\n                </p>\r\n                <div className=\"font-bold text-base\">\r\n                    {active ? (\r\n                        <StakingCountDown\r\n                            value={deadline}\r\n                            valueStyle={{ fontSize: '1.1rem', color: 'white' }}\r\n                        />\r\n                    ) : (\r\n                        <div className=\"bg-red-700 text-white text-center border rounded-xl\">\r\n                            Inactive\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CollapseStaking = () => {\r\n    const [loadingStaking, setLoading] = useState(false)\r\n    const [visibleModal, setVisibleModal] = useState(false)\r\n    const [indexModal, setIndexModal] = useState(0)\r\n    const { data } = useSCData()\r\n    const { createStake } = useSCInteractions()\r\n\r\n    const {\r\n        contractStakes,\r\n        userStakes,\r\n        userTokens,\r\n        isStakeholder,\r\n        totalUserStakes,\r\n    } = data\r\n\r\n    const handleShowModal = (index) => {\r\n        setVisibleModal(!visibleModal)\r\n        setIndexModal(index)\r\n    }\r\n    const deposit = (amount, stake) => {\r\n        setLoading(true)\r\n        const amountToStake = useAmountTo1E18(amount)\r\n        createStake(amountToStake, stake, (res) => {\r\n            if (res?.err) {\r\n                console.log(res)\r\n            }\r\n            setLoading(false)\r\n            setVisibleModal(!visibleModal)\r\n        })\r\n    }\r\n\r\n    if (!contractStakes) return null\r\n    return (\r\n        <React.Fragment>\r\n            <ModalStaking\r\n                loadingStaking={loadingStaking}\r\n                index={indexModal}\r\n                title={'Stake tokens'}\r\n                visibleModal={visibleModal}\r\n                onCloseModal={handleShowModal}\r\n                deposit={deposit}\r\n                userTokens={userTokens}\r\n            />\r\n            {contractStakes.map((item, index) => {\r\n                return (\r\n                    <Collapse\r\n                        bordered={false}\r\n                        // collapsible=\"header\"\r\n                        expandIcon={({ isActive }) => (\r\n                            <RightOutlined\r\n                                className=\"text-gray-13 dark:text-white\"\r\n                                rotate={isActive ? 90 : 0}\r\n                            />\r\n                        )}\r\n                        expandIconPosition=\"right\"\r\n                        key={index}\r\n                        className=\"mb-10 rounded-xl dark:bg-gray-4\"\r\n                    >\r\n                        <Panel header={<HeaderPanel info={item} />} key={index}>\r\n                            <div className=\"text-gray-13 dark:text-white border-t dark:border-gray-1 pt-4\">\r\n                                <div className=\"button-section text-right mb-4\">\r\n                                    {totalUserStakes >= 5 ? (\r\n                                        <div\r\n                                            className=\"alert alert-info\"\r\n                                            role=\"alert\"\r\n                                        >\r\n                                            You only can have 5 stakes\r\n                                        </div>\r\n                                    ) : (\r\n                                        <>\r\n                                            {userTokens > 0 ? (\r\n                                                <button\r\n                                                    onClick={() =>\r\n                                                        handleShowModal(index)\r\n                                                    }\r\n                                                    className=\"disabled:opacity-50 bg-primary text-white font-semibold border-none text-base px-6 py-2 rounded-md\"\r\n                                                    disabled={!item.active}\r\n                                                >\r\n                                                    Deposit\r\n                                                </button>\r\n                                            ) : (\r\n                                                <p>\r\n                                                    You need tokens to continue\r\n                                                </p>\r\n                                            )}\r\n                                        </>\r\n                                    )}\r\n                                </div>\r\n                                <TableStaking\r\n                                    stake={index}\r\n                                    lokedTime={item.lockedTime}\r\n                                    isStakeholder={isStakeholder}\r\n                                    userStakes={userStakes}\r\n                                />\r\n                            </div>\r\n                        </Panel>\r\n                    </Collapse>\r\n                )\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CollapseStaking\r\n","export default function useAmountTo1E18(x) {\r\n    let amount = 0\r\n    if (x < 1000) {\r\n        amount = x * 1e18\r\n    } else {\r\n        x = x * 1e18\r\n        let e = parseInt(x.toString().split('+')[1])\r\n        e -= 20\r\n        x /= Math.pow(10, e)\r\n        x += new Array(e + 1).join('0')\r\n        amount = x\r\n    }\r\n    return amount.toString()\r\n}\r\n","import React from 'react'\r\nimport { Row, Col } from 'antd'\r\nimport CollapseStaking from '../components/Collapse/CollapseStaking'\r\nimport ReloadDataButton from '../components/ReloadButton/ReloadDataButton'\r\n\r\nconst StakingView = (props) => {\r\n    return (\r\n        <div className=\"mx-5\">\r\n            <div className=\"pb-8\">\r\n                <div className=\"mb-6 mt-4 flex justify-end\">\r\n                    <ReloadDataButton />\r\n                </div>\r\n                <Row>\r\n                    <Col md={24}>\r\n                        <CollapseStaking />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StakingView\r\n","import * as Yup from 'yup'\r\nimport validator from 'validator'\r\n\r\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\r\n\r\nconst FILE_SIZE = 100 * 1024\r\n\r\nexport const regex = {\r\n    alpha: /^[A-Za-z]+$/,\r\n    alphaNumeric: /[a-zA-Z0-9]/,\r\n    atLeastOneUpperCase: /[A-Z]/,\r\n    phoneNumber:\r\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\r\n    exact5: /^[0-9]{5}$/,\r\n}\r\n\r\nexport const validations = {\r\n    password: Yup.string()\r\n        .min(8, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .matches(\r\n            regex.atLeastOneUpperCase,\r\n            'Must contain al least one uppercase letter.'\r\n        )\r\n        .required('Required'),\r\n    passwordConfirmation: Yup.string()\r\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n        .required('Required'),\r\n    userName: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(64, 'Too Long!')\r\n        .test(\r\n            'alphaNumeric',\r\n            'Must contain only letters and numbers.',\r\n            (value) => value && validator.isAlphanumeric(value)\r\n        )\r\n        .required('Required'),\r\n    mail: Yup.string()\r\n        .max(64, 'Too Long!')\r\n        .email('Must be a valid email format. example@email.com')\r\n        .lowercase('Must contain only lower case')\r\n        .required('Required'),\r\n    phone: Yup.string()\r\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\r\n        .required('Required'),\r\n    name: Yup.string()\r\n        .min(3, 'Too Short!')\r\n        .max(30, 'Too Long!')\r\n        .test(\r\n            'alpha',\r\n            'Must contain only letters.',\r\n            (value) =>\r\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\r\n        ),\r\n    // .required('Required'),\r\n    birthDate: Yup.date().required('Required'),\r\n    country: Yup.string().required('Required'),\r\n    state: Yup.string().required('Required'),\r\n    city: Yup.string().required('Required'),\r\n    line: Yup.string().required('Required'),\r\n    postalCode: Yup.string()\r\n        .matches(regex.exact5, 'Must be exactly 5 digits')\r\n        .required('Required'),\r\n    file: Yup.mixed()\r\n        .required('A file is required')\r\n        .test(\r\n            'fileSize',\r\n            'File too large',\r\n            (value) => value && value[0].size <= FILE_SIZE\r\n        )\r\n        .test(\r\n            'fileFormat',\r\n            'Unsupported Format',\r\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\r\n        )\r\n        .required('Required'),\r\n    min20Usd: Yup.mixed()\r\n        .required('Required')\r\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\r\n            if (value) {\r\n                let _v = value\r\n                _v = _v.replace(/\\D/g, '')\r\n                _v = parseFloat(_v)\r\n                return _v >= 20.0\r\n            }\r\n            return false\r\n        }),\r\n    no0Usd: Yup.mixed()\r\n        .required('Required')\r\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\r\n            if (value) {\r\n                let _v = value\r\n                _v = parseFloat(_v)\r\n                return _v > 0.0\r\n            }\r\n            return false\r\n        }),\r\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\r\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\r\n    onlyNumber: Yup.mixed()\r\n        .required('Required')\r\n        .test('onlyNumber', 'Field must be a number', (value) => {\r\n            if (value) {\r\n                const _v = value\r\n                const isnum = /^\\d+$/.test(_v)\r\n\r\n                return isnum\r\n            }\r\n            return false\r\n        }),\r\n    isColor: Yup.mixed()\r\n        .required('Required')\r\n        .test(\r\n            'color',\r\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\r\n            (value) => {\r\n                if (value) {\r\n                    const s = new Option().style\r\n                    s.color = value\r\n                    return s.color !== ''\r\n                }\r\n                return false\r\n            }\r\n        ),\r\n    number: Yup.number().required('Required'),\r\n    array: Yup.array().required('Required'),\r\n    staking: (totalTokens) => {\r\n        return Yup.mixed()\r\n            .required('Required')\r\n            .test('onlyNumber', 'Field must be a number', (value) => {\r\n                if (value) {\r\n                    const _v = value\r\n                    const isnum = /^\\d+$/.test(_v)\r\n\r\n                    return isnum\r\n                }\r\n                return false\r\n            })\r\n            .test('minStake', 'Minimum to stake is 1', (value) => {\r\n                if (value) {\r\n                    let _v = value\r\n                    _v = _v.replace(/\\D/g, '')\r\n                    _v = parseFloat(_v)\r\n                    return _v >= 1.0\r\n                }\r\n                return false\r\n            })\r\n            .test('maxStake', 'Insufficient Balance', (value) => {\r\n                if (value) {\r\n                    let _v = value\r\n                    _v = _v.replace(/\\D/g, '')\r\n                    _v = parseFloat(_v)\r\n                    return _v <= parseFloat(totalTokens)\r\n                }\r\n                return false\r\n            })\r\n    },\r\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\r\n        return Yup.mixed()\r\n            .required('Required')\r\n            .test('validUserName', 'You can not add yourself', (value) => {\r\n                if (value) {\r\n                    if (\r\n                        value === currentUser.userName ||\r\n                        value === currentUser.userMail\r\n                    )\r\n                        return false\r\n                    return true\r\n                }\r\n                return false\r\n            })\r\n            .test(\r\n                'validateIsNotExistingMember',\r\n                'You can not add existing members',\r\n                (value) => {\r\n                    if (value) {\r\n                        let valid = true\r\n\r\n                        for (\r\n                            let index = 0;\r\n                            index < currentMembers.length;\r\n                            index++\r\n                        ) {\r\n                            const { userName, userMail } = currentMembers[index]\r\n                            if (value === userName || value === userMail) {\r\n                                valid = false\r\n                                break\r\n                            }\r\n                        }\r\n                        return valid\r\n                    }\r\n                    return false\r\n                }\r\n            )\r\n    },\r\n}\r\n","/* eslint-disable react/display-name */\r\nimport React from 'react'\r\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\r\n\r\nconst FormItem = Form.Item\r\nconst { Option } = Select\r\n\r\nconst CreateAntField =\r\n    (AntComponent) =>\r\n    ({\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }) => {\r\n        const touched = form.touched[field.name]\r\n        const submitted = submitCount > 0\r\n        const hasError = form.errors[field.name]\r\n        const submittedError = hasError && submitted\r\n        const touchedError = hasError && touched\r\n        const onInputChange = ({ target: { value } }) =>\r\n            form.setFieldValue(field.name, value)\r\n        const onChange = (value) => form.setFieldValue(field.name, value)\r\n        const onBlur = () => form.setFieldTouched(field.name, true)\r\n        return (\r\n            <FormItem\r\n                label={label}\r\n                hasFeedback={\r\n                    (hasFeedback && submitted) || (hasFeedback && touched)\r\n                }\r\n                help={submittedError || touchedError ? hasError : false}\r\n                validateStatus={\r\n                    submittedError || touchedError ? 'error' : 'success'\r\n                }\r\n            >\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((name) => (\r\n                            <Option key={name}>{name}</Option>\r\n                        ))}\r\n                </AntComponent>\r\n            </FormItem>\r\n        )\r\n    }\r\n\r\nexport const AntSelect = CreateAntField(Select)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\nexport const AntInput = CreateAntField(Input)\r\nexport const AntInputPassword = CreateAntField(Input.Password)\r\nexport const AntTimePicker = CreateAntField(TimePicker)\r\n"],"sourceRoot":""}