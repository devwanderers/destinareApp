{"version":3,"sources":["../node_modules/antd/es/row/index.js","../node_modules/antd/es/col/index.js","services/promises.js","container/Auth/LoginContainer.js","container/Auth/SignUpContainer.js","views/AuthView/index.js","views/AuthView/Forms/Login.js","views/AuthView/Forms/SignUp.js","services/yupValidations.js","components/CreateAntField/index.js"],"names":["Row","Col","timeout","ms","Promise","resolve","setTimeout","sleep","fn","a","delay","connect","state","dispatch","signIn","userData","restProps","useState","showError","setShowError","errorMessage","setErrorMessage","handleSetError","Login","onSubmit","emailOrUsername","password","setSubmitting","email","then","resSignIn","error","payload","message","windowOpen","tripvixiaURL","signUp","actionsAuth","rest","SignUp","confirmPassword","restValues","resSignUp","AuthView","auth","FormAuth","LoginContainer","SignUpContainer","history","useHistory","className","style","flex","sm","href","onClick","e","preventDefault","push","HomePath","width","height","schema","Yup","validations","generic","initialValues","Fragment","validationSchema","isSubmitting","values","component","AntInput","name","type","placeholder","hasFeedback","value","AntInputPassword","iconRender","visible","showIcon","Item","block","htmlType","loading","paddingTop","paddingBottom","top","SignInPath","firstName","lastName","mail","userName","passwordConfirmation","SigUp","LoginInPath","SUPPORTED_FORMATS","regex","min","max","matches","required","oneOf","test","validator","isAlphanumeric","lowercase","phone","isAlpha","replace","birthDate","country","city","line","postalCode","file","size","includes","min20Usd","_v","parseFloat","no0Usd","boolean","onlyNumber","isColor","s","Option","color","number","array","validateIsNotCurrentUser","currentUser","currentMembers","userMail","valid","index","length","FormItem","Form","Select","CreateAntField","AntComponent","field","form","label","selectOptions","submitCount","props","touched","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","DatePicker","Input","Password","TimePicker"],"mappings":"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","file":"static/js/5.cf0a94ac.chunk.js","sourcesContent":["import { Row } from '../grid';\nexport default Row;","import { Col } from '../grid';\nexport default Col;","const returnPromise = (callback) => {\n    return new Promise((resolve, reject) => callback(resolve, reject))\n}\n\nconst timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms))\n\nconst sleep = async (fn, delay = 300) => {\n    await timeout(delay)\n    return fn()\n}\n\nexport { returnPromise, timeout, sleep }\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { sleep } from '../../services/promises'\nimport { signIn } from '../../store/reducers/auth/actions'\nimport Login from '../../views/AuthView/Forms/Login'\nimport { tripvixiaURL } from './../../constants/routerConstants'\nimport windowOpen from '../../services/windowOpen'\n\n// import { actionsAuth } from './../../store/reducers/auth/index'\n\nconst LoginContainer = ({ signIn, ...restProps }) => {\n    const [showError, setShowError] = useState(false)\n    const [errorMessage, setErrorMessage] = useState('')\n\n    const handleSetError = (errorMessage) => {\n        setShowError(true)\n        setErrorMessage(errorMessage)\n    }\n    const handleSubmitForm = (\n        { emailOrUsername, password },\n        { setSubmitting }\n    ) => {\n        setShowError(false)\n        signIn({ email: emailOrUsername, password }).then((resSignIn) => {\n            if (resSignIn?.error) {\n                if (resSignIn.payload?.message === 'InvalidCredentials') {\n                    handleSetError(\n                        'There was a problem logging in. Please check your email and password'\n                    )\n                } else {\n                    handleSetError(resSignIn.payload?.message)\n                }\n            } else {\n                windowOpen(tripvixiaURL)\n                sleep(() => {\n                    setSubmitting(false)\n                })\n            }\n        })\n    }\n\n    return (\n        <Login\n            showError={showError}\n            errorMessage={errorMessage}\n            onSubmit={handleSubmitForm}\n            {...restProps}\n        />\n    )\n}\n\nconst mapStateToProps = (state) => ({})\n\nconst mapDispatchToProps = (dispatch) => ({\n    signIn: (userData) => dispatch(signIn(userData)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer)\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { sleep } from '../../services/promises'\nimport SignUp from '../../views/AuthView/Forms/SignUp'\nimport { actionsAuth } from './../../store/reducers/auth/index'\n// import windowOpen from './../../services/windowOpen'\nimport { tripvixiaURL } from './../../constants/routerConstants'\nimport windowOpen from '../../services/windowOpen'\n\nconst SignUpContainer = ({ signUp, signIn, ...rest }) => {\n    const [showError, setShowError] = useState(false)\n    const [errorMessage, setErrorMessage] = useState('')\n\n    const handleSetError = (errorMessage) => {\n        setShowError(true)\n        setErrorMessage(errorMessage)\n    }\n\n    const handleSubmitForm = (\n        { confirmPassword, ...restValues },\n        { setSubmitting }\n    ) => {\n        setShowError(false)\n        signUp(restValues).then((resSignUp) => {\n            if (resSignUp?.error) {\n                handleSetError(resSignUp.payload?.message)\n                sleep(() => {\n                    setSubmitting(false)\n                })\n            } else {\n                const { email, password } = restValues\n                signIn({ email, password }).then((resSignIn) => {\n                    if (resSignIn?.error) {\n                        handleSetError(resSignIn.payload?.message)\n                    } else {\n                        windowOpen(tripvixiaURL)\n                        sleep(() => {\n                            setSubmitting(false)\n                        })\n                    }\n                })\n            }\n        })\n    }\n    return (\n        <SignUp\n            showError={showError}\n            errorMessage={errorMessage}\n            onSubmit={handleSubmitForm}\n            {...rest}\n        />\n    )\n}\n\nconst mapStateToProps = (state) => ({})\n\nconst mapDispatchToProps = (dispatch) => ({\n    signUp: (userData) => dispatch(actionsAuth.signUp(userData)),\n    signIn: (userData) => dispatch(actionsAuth.signIn(userData)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpContainer)\n","import React from 'react'\nimport { Row, Col } from 'antd'\n\nimport { DestinareLogoColorSVG } from '../../assets/svg/brand/index'\n\nimport LoginContainer from './../../container/Auth/LoginContainer'\nimport SignUpContainer from './../../container/Auth/SignUpContainer'\nimport { useHistory } from 'react-router'\nimport { HomePath } from '../../constants/routerConstants'\n\nconst AuthView = ({ auth }) => {\n    const FormAuth = auth === 'login' ? LoginContainer : SignUpContainer\n    const history = useHistory()\n    return (\n        <section className=\"login-content\">\n            <div className=\"absolute left-0 bottom-0 top-0 right-0 md:right-2/4 bg-sunset3 bg-cover bg-right md:bg-right hidden md:flex\"></div>\n            <div className=\"section relative lg:wrapper mx-auto lg:pl-4 lg:pr-4\">\n                <Row className=\"justify-center \" style={{ flex: '1' }}>\n                    <Col sm={12} className=\" flex justify-center \">\n                        <div className=\"col-inner\">\n                            {auth === 'login' ? (\n                                <h2 className=\"\">\n                                    Regístrate para apoyar a tus creadores\n                                    favoritos\n                                </h2>\n                            ) : (\n                                <h2 className=\"\">\n                                    Regístrate para apoyar a tus creadores\n                                    favoritos 2\n                                </h2>\n                            )}\n                        </div>\n                    </Col>\n                    <Col sm={12} className=\"flex  justify-center\">\n                        <div className=\"col-inner\">\n                            <h1 className=\"mb-2 flex justify-center \">\n                                <a\n                                    href=\"#\"\n                                    onClick={(e) => {\n                                        e.preventDefault()\n                                        history.push(HomePath)\n                                    }}\n                                >\n                                    <DestinareLogoColorSVG\n                                        width={245}\n                                        height={64}\n                                    />\n                                </a>\n                            </h1>\n                            <FormAuth />\n                        </div>\n                    </Col>\n                </Row>\n            </div>\n        </section>\n    )\n}\n\nAuthView.propTypes = {}\n\nexport default AuthView\n","import React from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport { Button, Form as FormAnt, Alert } from 'antd'\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons'\nimport * as Yup from 'yup'\nimport { useHistory } from 'react-router'\nimport { validations } from './../../../services/yupValidations'\nimport {\n    AntInput,\n    AntInputPassword,\n} from './../../../components/CreateAntField/index'\nimport { SignInPath } from '../../../constants/routerConstants'\n\nconst schema = Yup.object({\n    emailOrUsername: validations.generic,\n    password: validations.generic,\n})\n\nconst initialValues = {\n    emailOrUsername: '',\n    password: '',\n}\n\nconst Login = ({ onSubmit, showError, errorMessage }) => {\n    const history = useHistory()\n\n    return (\n        <React.Fragment>\n            <div className=\"font-medium mb-2\">Log in</div>\n            <Formik\n                validationSchema={schema}\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n            >\n                {({ isSubmitting, values }) => (\n                    <Form className=\"mb-4\">\n                        <Field\n                            component={AntInput}\n                            name=\"emailOrUsername\"\n                            type=\"email\"\n                            placeholder=\"Email\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.emailOrUsername}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.password}\n                        />\n                        {showError && (\n                            <Alert\n                                className=\"mb-5\"\n                                message={errorMessage}\n                                type=\"error\"\n                                showIcon\n                            />\n                        )}\n                        <FormAnt.Item className=\"mb-0\">\n                            <Button\n                                block\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                className=\"text-sm px-4 py-2 py h-12 rounded-full font-medium\"\n                                // disabled={isSubmitting}\n                                loading={isSubmitting}\n                                style={{\n                                    paddingTop: '9px',\n                                    paddingBottom: '9px',\n                                }}\n                            >\n                                LOGIN\n                            </Button>\n                        </FormAnt.Item>\n                        <div className=\"login-links flex flex-col text-center\">\n                            <a\n                                type=\"link\"\n                                className=\"text-sm h-auto py-0 text-gray-9 hover:text-info\"\n                            >\n                                Forgot password?\n                            </a>\n                            <span\n                                className=\"text-gray-9 text-sm h-auto py-0 relative\"\n                                style={{ top: '-7px' }}\n                            >\n                                {\"Don't have an account? \"}\n                                <a\n                                    className=\"font-medium text-blue-900 hover:text-info\"\n                                    href=\"#\"\n                                    onClick={(e) => {\n                                        e.preventDefault()\n\n                                        history.push(SignInPath)\n                                    }}\n                                >\n                                    Sign up\n                                </a>\n                            </span>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            {!showError && <div className=\"h-40px mb-5\"></div>}\n        </React.Fragment>\n    )\n}\n\nLogin.propTypes = {}\n\nexport default Login\n","import React from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport { Button, Form as FormAnt, Alert } from 'antd'\nimport * as Yup from 'yup'\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons'\nimport { validations } from '../../../services/yupValidations'\nimport { useHistory } from 'react-router'\n\nimport { LoginInPath } from '../../../constants/routerConstants'\nimport {\n    AntInput,\n    AntInputPassword,\n} from '../../../components/CreateAntField/index'\n\nconst schema = Yup.object({\n    firstName: validations.name,\n    lastName: validations.name,\n    email: validations.mail,\n    userName: validations.userName,\n    password: validations.password,\n    confirmPassword: validations.passwordConfirmation,\n})\n\nconst initialValues = {\n    firstName: '',\n    lastName: '',\n    userName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n}\n\nconst SigUp = ({ onSubmit, showError, errorMessage }) => {\n    const history = useHistory()\n\n    return (\n        <React.Fragment>\n            <div className=\"font-medium mb-2\">Sign up</div>\n            <Formik\n                validationSchema={schema}\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n            >\n                {({ values, isSubmitting }) => (\n                    <Form className=\"mb-4\">\n                        <div className=\"flex flex-row space-x-2\">\n                            <Field\n                                component={AntInput}\n                                type=\"text\"\n                                name=\"firstName\"\n                                placeholder=\"* First Name\"\n                                className=\"h-12 rounded-lg\"\n                                hasFeedback\n                                value={values?.firstName}\n                            />\n                            <Field\n                                component={AntInput}\n                                type=\"text\"\n                                name=\"lastName\"\n                                placeholder=\"* Last Name\"\n                                className=\"h-12 rounded-lg\"\n                                hasFeedback\n                                value={values?.lastName}\n                            />\n                        </div>\n                        <Field\n                            component={AntInput}\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder=\"Email\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.email}\n                        />\n                        <Field\n                            component={AntInput}\n                            type=\"text\"\n                            name=\"userName\"\n                            placeholder=\"Username\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.userName}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.password}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            placeholder=\"Confirm Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.confirmPassword}\n                        />\n                        {showError && (\n                            <Alert\n                                className=\"mb-5\"\n                                message={errorMessage}\n                                type=\"error\"\n                                showIcon\n                            />\n                        )}\n\n                        <FormAnt.Item className=\"mb-0\">\n                            <Button\n                                type=\"primary\"\n                                block\n                                className=\"text-sm px-4 py-2 py h-12 rounded-full font-medium\"\n                                htmlType=\"submit\"\n                                loading={isSubmitting}\n                                style={{\n                                    paddingTop: '9px',\n                                    paddingBottom: '9px',\n                                }}\n                            >\n                                Register\n                            </Button>\n                        </FormAnt.Item>\n                    </Form>\n                )}\n            </Formik>\n\n            <div className=\"login-links text-center\">\n                <span\n                    className=\"text-gray-9 text-sm h-auto py-0 relative\"\n                    style={{ top: '-7px' }}\n                >\n                    Already have an account.\n                    <a\n                        className=\"font-medium text-blue-200 hover:text-info\"\n                        href=\"#\"\n                        onClick={(e) => {\n                            e.preventDefault()\n\n                            history.push(LoginInPath)\n                        }}\n                    >\n                        {' '}\n                        Log in\n                    </a>\n                </span>\n            </div>\n            {!showError && <div className=\"h-40px mb-5\"></div>}\n        </React.Fragment>\n    )\n}\n\nSigUp.propTypes = {}\n\nexport default SigUp\n","import * as Yup from 'yup'\nimport validator from 'validator'\n\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\n\nconst FILE_SIZE = 100 * 1024\n\nexport const regex = {\n    alpha: /^[A-Za-z]+$/,\n    alphaNumeric: /[a-zA-Z0-9]/,\n    atLeastOneUpperCase: /[A-Z]/,\n    phoneNumber:\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\n    exact5: /^[0-9]{5}$/,\n}\n\nexport const validations = {\n    password: Yup.string()\n        .min(8, 'Too Short!')\n        .max(64, 'Too Long!')\n        .matches(\n            regex.atLeastOneUpperCase,\n            'Must contain al least one uppercase letter.'\n        )\n        .required('Required'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Required'),\n    userName: Yup.string()\n        .min(3, 'Too Short!')\n        .max(64, 'Too Long!')\n        .test(\n            'alphaNumeric',\n            'Must contain only letters and numbers.',\n            (value) => value && validator.isAlphanumeric(value)\n        )\n        .required('Required'),\n    mail: Yup.string()\n        .max(64, 'Too Long!')\n        .email('Must be a valid email format. example@email.com')\n        .lowercase('Must contain only lower case')\n        .required('Required'),\n    phone: Yup.string()\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\n        .required('Required'),\n    name: Yup.string()\n        .min(3, 'Too Short!')\n        .max(30, 'Too Long!')\n        .test(\n            'alpha',\n            'Must contain only letters.',\n            (value) =>\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\n        ),\n    // .required('Required'),\n    birthDate: Yup.date().required('Required'),\n    country: Yup.string().required('Required'),\n    state: Yup.string().required('Required'),\n    city: Yup.string().required('Required'),\n    line: Yup.string().required('Required'),\n    postalCode: Yup.string()\n        .matches(regex.exact5, 'Must be exactly 5 digits')\n        .required('Required'),\n    file: Yup.mixed()\n        .required('A file is required')\n        .test(\n            'fileSize',\n            'File too large',\n            (value) => value && value[0].size <= FILE_SIZE\n        )\n        .test(\n            'fileFormat',\n            'Unsupported Format',\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\n        )\n        .required('Required'),\n    min20Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\n            if (value) {\n                let _v = value\n                _v = _v.replace(/\\D/g, '')\n                _v = parseFloat(_v)\n                return _v >= 20.0\n            }\n            return false\n        }),\n    no0Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\n            if (value) {\n                let _v = value\n                _v = parseFloat(_v)\n                return _v > 0.0\n            }\n            return false\n        }),\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\n    onlyNumber: Yup.mixed()\n        .required('Required')\n        .test('onlyNumber', 'Field must be a number', (value) => {\n            if (value) {\n                const _v = value\n                const isnum = /^\\d+$/.test(_v)\n\n                return isnum\n            }\n            return false\n        }),\n    isColor: Yup.mixed()\n        .required('Required')\n        .test(\n            'color',\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\n            (value) => {\n                if (value) {\n                    const s = new Option().style\n                    s.color = value\n                    return s.color !== ''\n                }\n                return false\n            }\n        ),\n    number: Yup.number().required('Required'),\n    array: Yup.array().required('Required'),\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\n        return Yup.mixed()\n            .required('Required')\n            .test('validUserName', 'You can not add yourself', (value) => {\n                if (value) {\n                    if (\n                        value === currentUser.userName ||\n                        value === currentUser.userMail\n                    )\n                        return false\n                    return true\n                }\n                return false\n            })\n            .test(\n                'validateIsNotExistingMember',\n                'You can not add existing members',\n                (value) => {\n                    if (value) {\n                        let valid = true\n\n                        for (\n                            let index = 0;\n                            index < currentMembers.length;\n                            index++\n                        ) {\n                            const { userName, userMail } = currentMembers[index]\n                            if (value === userName || value === userMail) {\n                                valid = false\n                                break\n                            }\n                        }\n                        return valid\n                    }\n                    return false\n                }\n            )\n    },\n}\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\n\nconst FormItem = Form.Item\nconst { Option } = Select\n\nconst CreateAntField =\n    (AntComponent) =>\n    ({\n        field,\n        form,\n        hasFeedback,\n        label,\n        selectOptions,\n        submitCount,\n        type,\n        ...props\n    }) => {\n        const touched = form.touched[field.name]\n        const submitted = submitCount > 0\n        const hasError = form.errors[field.name]\n        const submittedError = hasError && submitted\n        const touchedError = hasError && touched\n        const onInputChange = ({ target: { value } }) =>\n            form.setFieldValue(field.name, value)\n        const onChange = (value) => form.setFieldValue(field.name, value)\n        const onBlur = () => form.setFieldTouched(field.name, true)\n        return (\n            <FormItem\n                label={label}\n                hasFeedback={\n                    (hasFeedback && submitted) || (hasFeedback && touched)\n                }\n                help={submittedError || touchedError ? hasError : false}\n                validateStatus={\n                    submittedError || touchedError ? 'error' : 'success'\n                }\n            >\n                <AntComponent\n                    {...field}\n                    {...props}\n                    onBlur={onBlur}\n                    onChange={type ? onInputChange : onChange}\n                >\n                    {selectOptions &&\n                        selectOptions.map((name) => (\n                            <Option key={name}>{name}</Option>\n                        ))}\n                </AntComponent>\n            </FormItem>\n        )\n    }\n\nexport const AntSelect = CreateAntField(Select)\nexport const AntDatePicker = CreateAntField(DatePicker)\nexport const AntInput = CreateAntField(Input)\nexport const AntInputPassword = CreateAntField(Input.Password)\nexport const AntTimePicker = CreateAntField(TimePicker)\n"],"sourceRoot":""}