{"version":3,"sources":["hooks/useInput.js","services/input-services.js","components/ReloadButton/ReloadDataButton.js","components/CountDowns/StakingCountDown.js","components/Modals/ModalStaking.js","components/Buttons/ButtonSpin.js","components/Tables/TableStaking.js","hooks/useEffectOnce.js","components/Collapse/CollapseStaking.js","hooks/useAmountTo1E18.js","views/StakingView.js","services/helpers.js","components/Buttons/ButtonSpinner.js","components/Inputs/Input.js","assets/images/utilities/wallet2.png","assets/images/utilities/index.js","hooks/useResponsive.js"],"names":["useInput","initialValue","validate","format","useState","value","setValue","console","log","reset","bind","onChange","e","target","inputRegex","RegExp","validOnlyNumbers","test","escapeRegExp","validMinValue","minValue","parseFloat","replace","validMaxValue","maxValue","ReloadDataButton","reloadData","useSCInteractions","fetchingData","useSCData","fetching","disabled","className","onClick","cls","size","Countdown","Statistic","onFinish","StakingCountDown","color","valueStyle","fontSize","lineHeight","formattedCurrency","v","formatNumber","formatDDOT","num","includes","split","parseInt","ModalStaking","index","title","visibleModal","onCloseModal","deposit","userTokens","loadingStaking","tokens","Math","floor","amount","useResponsive","base","md","lg","xl","widthModal","useEffect","visible","onCancel","width","maskClosable","footer","toString","Input","variant","onBlur","addDecimal","type","ButtonSpinner","Number","loading","antIcon","LoadingOutlined","style","spin","ButtonSpin","textLoading","children","restProps","indicator","Fragment","columns","dataIndex","key","ellipsis","customizeRenderEmpty","InboxOutlined","UnStake","cb","item","lockDuration","getReward","setLoading","enableUnstake","setEnableUnstake","lockDurationEnd","today","Date","ends","getTime","useInterval","res","err","TableStaking","stake","lokedTime","isStakeholder","userStakes","isDarkMode","widthCell","data","reduce","acc","i","reward","date","stakeTime","toLocaleString","depositAmount","tokensLocked","deposit_date","deposit_amount","useCurrency","lock_duration","unStake","renderEmpty","pagination","dataSource","bordered","scroll","x","Panel","Collapse","HeaderPanel","info","APR","lockedTime","totalDeposit","active","duration","now","ceil","HeaderPanelMobile","deadline","CollapseStaking","setVisibleModal","indexModal","setIndexModal","useWindowSize","createStake","useListenCookie","contractStakes","totalUserStakes","handleShowModal","length","src","utilitiesImages","wallet","alt","amountToStake","pow","Array","join","useAmountTo1E18","map","expandIcon","isActive","RightOutlined","rotate","expandIconPosition","header","role","StakingView","props","height","input","filter","cond","trim","string","classes","pill","none","small","normal","large","primary","secondary","danger","primaryborder","warning","warningLink","spinnerSize","forwardRef","ref","displayName","rounded","medium","temp","values","xxl","sm","useDeepCompareEffect"],"mappings":"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","file":"static/js/14.be77f51c.chunk.js","sourcesContent":["/* eslint-disable prefer-const */\nimport { useState } from 'react'\n\nconst useInput = (initialValue = '', validate, format) => {\n    const [value, setValue] = useState(initialValue)\n    console.log(initialValue)\n    return {\n        value,\n        setValue,\n        reset: () => setValue(initialValue),\n        bind: {\n            value,\n            onChange: (e) => {\n                let value = e.target.value\n\n                if (\n                    (typeof validate === 'function' &&\n                        validate(e.target.value)) ||\n                    typeof validate !== 'function'\n                ) {\n                    if (typeof format === 'function') value = format(value)\n                    setValue(value)\n                }\n            },\n        },\n    }\n}\n\nexport default useInput\n","/* eslint-disable prefer-regex-literals */\nimport { escapeRegExp } from './helpers'\n\nexport const onlyNumberKey = (evt) => {\n    const ASCIICode = evt.which ? evt.which : evt.keyCode\n    if (ASCIICode > 31 && (ASCIICode < 48 || ASCIICode > 57))\n        evt.preventDefault()\n}\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`)\n\nexport const validOnlyNumbers = (value) => {\n    if (value === '' || inputRegex.test(escapeRegExp(value))) {\n        return true\n    }\n    return false\n}\n\nexport const validMinValue = (minValue) => (value) => {\n    if (\n        value === '' ||\n        (value && parseFloat(value.replace(/,/g, '')) >= minValue)\n    ) {\n        return true\n    }\n    return false\n}\n\nexport const validMaxValue = (maxValue) => (value) => {\n    if (\n        value === '' ||\n        (value && parseFloat(value.replace(/,/g, '')) <= maxValue)\n    ) {\n        return true\n    }\n    return false\n}\n\nexport const formatThousand = (v) =>\n    `${v}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n","import React from 'react'\n// import { Spin } from 'antd'\n// import { LoadingOutlined } from '@ant-design/icons'\n\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\nimport { useSCData } from '../../store/reducers/scInteractionReducer/hooks'\n// import ButtonSpinner from '../Buttons/ButtonSpinner'\nimport IconRefresh from './../../assets/svg/icons/IconRefresh'\nimport { cls } from './../../services/helpers'\n\n// const antIcon = (\n//     <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\n// )\n\nconst ReloadDataButton = () => {\n    const { reloadData } = useSCInteractions()\n    const { fetching: fetchingData } = useSCData()\n    return (\n        <button\n            disabled={fetchingData}\n            className=\"flex items-start justify-center\"\n            onClick={() => {\n                reloadData(true)\n            }}\n        >\n            <div className=\"h-8 w-8 lg:h-9 lg:w-9\">\n                <IconRefresh\n                    className={cls(`${fetchingData && 'animate-spin'}`)}\n                    size={'100%'}\n                />\n            </div>\n        </button>\n    )\n}\n\nexport default ReloadDataButton\n","import { Statistic } from 'antd'\nimport { FaRegClock } from 'react-icons/fa'\nconst { Countdown } = Statistic\n\nfunction onFinish() {\n    console.log('finished!')\n}\n\nconst StakingCountDown = ({ value, size = '1.1rem', color = '#fff' }) => {\n    return (\n        <div className=\"flex flex-row justify-center items-center bg-benefits-blue-1 text-white px-3 border rounded-xl font-bold text-sm py-1\">\n            <FaRegClock className=\"mr-1\" size={size} color={color} />\n            <Countdown\n                className=\"text-xxs\"\n                value={value}\n                format=\"DD:HH:mm:ss\"\n                valueStyle={{\n                    fontSize: size,\n                    color,\n                    lineHeight: 0,\n                }}\n                onFinish={onFinish}\n            />\n        </div>\n    )\n}\nexport default StakingCountDown\n","/* eslint-disable no-unused-vars */\nimport React, { useEffect } from 'react'\nimport { Modal } from 'antd'\n// import InputStaking from '../Inputs/InputStaking'\nimport useResponsive from '../../hooks/useResponsive'\nimport useCurrency from '../../hooks/useCurrency'\nimport useInput from './../../hooks/useInput'\nimport Input from './../Inputs/Input'\nimport ButtonSpinner from './../Buttons/ButtonSpinner'\nimport {\n    validMinValue,\n    validMaxValue,\n    validOnlyNumbers,\n} from './../../services/input-services'\nimport formatNumber from 'format-number'\n\nconst minValue = validMinValue(0)\n\nconst formattedCurrency = (v) =>\n    formatNumber({})(v, {\n        // noSeparator: true,\n    })\n\nconst formatDDOT = (v) => {\n    if (v === '') return '0'\n\n    let num = v.replace(/,/g, '')\n\n    if (!num.includes('.')) return formattedCurrency(parseInt(num))\n    num = num.split('.')\n\n    return `${formattedCurrency(parseInt(num[0]))}.${num[1]}`\n}\n\nconst addDecimal = (v) => {\n    console.log('entro')\n    if (v === '') return '0'\n\n    let num = v.replace(/,/g, '')\n\n    if (!num.includes('.')) return formattedCurrency(parseInt(num))\n    num = num.split('.')\n\n    return `${formattedCurrency(parseInt(num[0]))}.${\n        num[1] !== '' ? num[1] : '0'\n    }`\n}\n\nconst ModalStaking = ({\n    index,\n    title,\n    visibleModal,\n    onCloseModal,\n    deposit,\n    userTokens,\n    loadingStaking,\n}) => {\n    userTokens = userTokens / 1e18\n    const tokens = Math.floor(userTokens)\n    const maxValue = validMaxValue(tokens)\n    const {\n        value: amount,\n        bind,\n        setValue,\n        reset,\n    } = useInput(\n        '0',\n        (v) =>\n            minValue(v) && maxValue(v) && validOnlyNumbers(v.replace(/,/g, '')),\n        formatDDOT\n    )\n    // const [amount, setAmount] = useState(0)\n    const [widthModal] = useResponsive({\n        base: '100%',\n        md: '70%',\n        lg: '50%',\n        xl: '30%',\n    })\n\n    const getDdot = () => {\n        console.log('get ddot')\n    }\n\n    const handleOnCloseModal = () => {\n        onCloseModal()\n    }\n\n    const handleSubmit = () => {\n        // console.log(Number(values.stakingAmount))\n        deposit(Number(amount.replace(/,/g, '')), index)\n    }\n\n    useEffect(() => {\n        if (visibleModal) reset()\n    }, [visibleModal])\n\n    return (\n        <Modal\n            title={title}\n            visible={visibleModal}\n            onCancel={onCloseModal}\n            width={widthModal}\n            maskClosable={false}\n            footer={null}\n        >\n            <div>\n                <div className=\"mb-2\">\n                    <div className=\"flex justify-between items-center\">\n                        <p className=\"font-bold text-base\">Stake</p>\n                        <p className=\"font-bold text-base\">\n                            Balance:{' '}\n                            <span className=\"font-normal\">\n                                {formatDDOT(userTokens.toString())}\n                            </span>\n                        </p>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                        <div className=\"  flex flex-row items-start\">\n                            <div className=\"mr-2\">\n                                <Input\n                                    variant=\"secondary\"\n                                    className=\"mr-2 w-full\"\n                                    onBlur={() => {\n                                        setValue(addDecimal(amount))\n                                    }}\n                                    {...bind}\n                                />\n                            </div>\n                            <button\n                                type=\"button\"\n                                className=\"disabled:opacity-50 bg-primary rounded-md py-1 px-3 text-white text-base font-bold\"\n                                onClick={() => {\n                                    setValue(formatDDOT(tokens.toString()))\n                                    // setFieldValue('stakingAmount', tokens)\n                                }}\n                            >\n                                MAX\n                            </button>\n                        </div>\n                        <p className=\"text-2xl font-bold\">DDOT</p>\n                    </div>\n                </div>\n                <div className=\"mt-8\">\n                    {/* <div className=\"flex justify-between items-center mb-4\">\n                                <p className=\"text-base\">\n                                    Annual ROI at current rates:\n                                </p>\n                                <p className=\"text-base font-bold\">$0,00</p>\n                            </div> */}\n                    <div className=\"flex justify-around items-center mb-5\">\n                        <ButtonSpinner\n                            size=\"none\"\n                            variant=\"primaryborder\"\n                            className=\"py-1 px-10 text-lg font-bold\"\n                            disabled={loadingStaking}\n                            onClick={handleOnCloseModal}\n                            // className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 px-10 text-white text-lg font-bold\"\n                        >\n                            Cancel\n                        </ButtonSpinner>\n                        <ButtonSpinner\n                            size=\"none\"\n                            className=\"py-1 px-10 text-lg font-bold\"\n                            // className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 px-10 text-white text-lg font-bold\"\n                            disabled={loadingStaking || Number(amount) <= 0}\n                            loading={loadingStaking}\n                            onClick={handleSubmit}\n                        >\n                            Confirm\n                        </ButtonSpinner>\n                    </div>\n                    {/* <div className=\"text-center\">\n                        <p\n                            onClick={() => getDdot()}\n                            className=\"font-bold text-xl text-primary cursor-pointer\"\n                        >\n                            Get DDOT\n                        </p>\n                    </div> */}\n                </div>\n            </div>\n        </Modal>\n    )\n}\n\nexport default ModalStaking\n","import React from 'react'\nimport { Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\n\nconst antIcon = (\n    <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\n)\n\nconst ButtonSpin = ({\n    loading,\n    disabled,\n    textLoading,\n    children,\n    ...restProps\n}) => {\n    return (\n        <button\n            className=\" bg-primary text-lg px-12 py-2 rounded-md text-white disabled:opacity-50\"\n            disabled={disabled}\n            {...restProps}\n        >\n            {loading ? (\n                <span>\n                    <span className=\"pr-2\">\n                        <Spin indicator={antIcon} />\n                    </span>\n                    {textLoading}\n                </span>\n            ) : (\n                <React.Fragment> {children}</React.Fragment>\n            )}\n        </button>\n    )\n}\n\nexport default ButtonSpin\n","import { useState } from 'react'\nimport { ConfigProvider, Table } from 'antd'\nimport { InboxOutlined } from '@ant-design/icons'\nimport useCurrency from '../../hooks/useCurrency'\nimport StakingCountDown from '../CountDowns/StakingCountDown'\nimport useInterval from './../../hooks/useInterval'\nimport useEffectOnce from './../../hooks/useEffectOnce'\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\nimport ButtonSpin from '../Buttons/ButtonSpin'\nimport useResponsive from './../../hooks/useResponsive'\nimport { cls } from './../../services/helpers'\n\nconst columns = [\n    {\n        title: 'Deposit date',\n        dataIndex: 'deposit_date',\n        key: 'deposit_date',\n        ellipsis: true,\n    },\n    {\n        title: 'Deposit amount',\n        dataIndex: 'deposit_amount',\n        key: 'deposit_amount',\n        ellipsis: true,\n    },\n    {\n        title: 'Reward',\n        dataIndex: 'reward',\n        key: 'reward',\n        ellipsis: true,\n    },\n    {\n        title: 'Lock duration',\n        dataIndex: 'lock_duration',\n        key: 'lock_duration',\n        ellipsis: true,\n    },\n    {\n        title: '',\n        dataIndex: 'unStake',\n        key: 'unStake',\n        ellipsis: true,\n    },\n]\n\nconst customizeRenderEmpty = () => (\n    <div className=\"text-center\">\n        <InboxOutlined style={{ fontSize: 40 }} />\n        <p>No Data</p>\n    </div>\n)\n\nconst UnStake = ({ item, lockDuration }) => {\n    const { getReward } = useSCInteractions()\n    const [loading, setLoading] = useState(false)\n    const [enableUnstake, setEnableUnstake] = useState(false)\n\n    const lockDurationEnd = () => {\n        const today = new Date()\n        const ends = new Date(lockDuration)\n        setEnableUnstake(today.getTime() > ends.getTime())\n    }\n\n    useEffectOnce(() => {\n        lockDurationEnd()\n    })\n\n    useInterval(\n        () => {\n            lockDurationEnd()\n        },\n        !enableUnstake ? 500 : null\n    )\n\n    const handleUnstake = () => {\n        setLoading(true)\n        getReward(item, (res) => {\n            if (res?.err) {\n                console.log(res)\n            }\n            setLoading(false)\n        })\n    }\n\n    return (\n        <div className=\"flex w-full\">\n            <ButtonSpin\n                onClick={handleUnstake}\n                className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 w-full md:w-8/12 text-white text-lg font-bold mx-auto\"\n                disabled={!enableUnstake || loading}\n                loading={loading}\n            >\n                Unstake\n            </ButtonSpin>\n        </div>\n    )\n}\n\nconst TableStaking = ({\n    stake,\n    lokedTime,\n    isStakeholder,\n    userStakes,\n    getReward,\n    isDarkMode,\n}) => {\n    const [widthCell] = useResponsive({ base: 150, md: '100%' })\n\n    const data = userStakes.reduce((acc, item, i) => {\n        if (Number(item.type) === stake && item.reward != null) {\n            const date = new Date(item.stakeTime * 1000).toLocaleString('en-GB')\n            const depositAmount = item.tokensLocked / 1e18\n            const reward =\n                (Number(item.reward) - Number(item.tokensLocked)) / 1e18\n            let lockDuration = Number(item.stakeTime) + Number(lokedTime)\n            console.log({ item })\n            lockDuration = lockDuration * 1000\n            return [\n                ...acc,\n                {\n                    key: i,\n                    deposit_date: date,\n                    deposit_amount: useCurrency(depositAmount, 0),\n                    reward: useCurrency(reward, 2),\n                    lock_duration: (\n                        <StakingCountDown\n                            value={lockDuration}\n                            size=\"1rem\"\n                            color=\"white\"\n                        />\n                    ),\n                    width: 100,\n                    unStake: (\n                        <UnStake\n                            item={i}\n                            getReward={getReward}\n                            lockDuration={lockDuration}\n                        />\n                    ),\n                },\n            ]\n        }\n        return acc\n    }, [])\n\n    return (\n        <div className=\"table-info overflow-y-auto \">\n            {isStakeholder && (\n                <ConfigProvider renderEmpty={customizeRenderEmpty}>\n                    <Table\n                        pagination={false}\n                        columns={columns.reduce(\n                            (acc, v) => [...acc, { ...v, width: widthCell }],\n                            []\n                        )}\n                        dataSource={data}\n                        className={cls(\n                            `${isDarkMode && 'ant-table-wrapper-dark'}`\n                        )}\n                        bordered\n                        scroll={{ x: '100%' }}\n                    />\n                </ConfigProvider>\n            )}\n        </div>\n    )\n}\nexport default TableStaking\n","import { useEffect } from 'react'\n\nexport default function useEffectOnce(cb) {\n    useEffect(cb, [])\n}\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react'\nimport { Collapse } from 'antd'\nimport useAmountTo1E18 from '../../hooks/useAmountTo1E18'\nimport StakingCountDown from '../CountDowns/StakingCountDown'\nimport ModalStaking from '../Modals/ModalStaking'\nimport TableStaking from '../Tables/TableStaking'\nimport useCurrency from '../../hooks/useCurrency'\nimport { RightOutlined } from '@ant-design/icons'\nimport { ImagotipoSVG } from '../../assets/svg/home'\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\nimport { useSCData } from '../../store/reducers/scInteractionReducer/hooks'\nimport useWindowSize from './../../hooks/useWindowSize'\nimport useResponsive from './../../hooks/useResponsive'\nimport useListenCookie from '../../hooks/useListenCookie'\nimport utilitiesImages from './../../assets/images/utilities/index'\nconst { Panel } = Collapse\n\nconst HeaderPanel = ({ info: { APR, lockedTime, totalDeposit, active } }) => {\n    totalDeposit = totalDeposit / 1e18\n    const duration = lockedTime * (1 / 86400)\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\n    return (\n        <div className=\"w-full flex flex-row justify-between items-center py-2\">\n            <div className=\" flex flex-row text-gray-13 dark:text-white items-center leading-none\">\n                <ImagotipoSVG className=\"w-9 mr-2 \" />\n                <span className=\"font-bold text-sm md:text-lg \">DDOT</span>\n            </div>\n            <div className=\" text-gray-13 dark:text-white  text-center flex flex-row items-center leading-none\">\n                <div className=\"font-light text-sm md:text-sm mr-1\">APR:</div>\n                <div className=\"font-bold text-xxs md:text-base\">{APR}%</div>\n            </div>\n            <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\n                <div className=\"font-light text-xs md:text-sm mr-1\">\n                    Total deposit:\n                </div>\n                <div className=\"font-bold text-xxs md:text-base\">\n                    {useCurrency(totalDeposit, 0)}\n                </div>\n            </div>\n            {/* <div className=\"text-gray-13 dark:text-white\">\n                <p className=\"font-light text-lg\">Max cap</p>\n                <p className=\"font-bold text-base\">{}</p>\n            </div> */}\n            <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\n                <div className=\"font-light text-xs md:text-sm mr-1 \">\n                    Duration:\n                </div>\n                <div className=\"font-bold text-xxs md:text-base \">\n                    {Math.ceil(duration)} days\n                </div>\n            </div>\n            <div className=\" flex flex-row justify-center items-center leading-none\">\n                {!active && (\n                    <div className=\"bg-red-300 text-red-0 text-center rounded-md px-3 py-1  mx-auto font-medium text-xs md:text-sm \">\n                        Inactive\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nconst HeaderPanelMobile = ({\n    info: { APR, lockedTime, totalDeposit, active },\n}) => {\n    totalDeposit = totalDeposit / 1e18\n    const duration = lockedTime * (1 / 86400)\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\n    return (\n        <div className=\"w-full py-2\">\n            <div className=\"flex flex-row justify-between\">\n                <div className=\" flex flex-row text-gray-13 dark:text-white items-center leading-none\">\n                    <ImagotipoSVG className=\"w-9 mr-2 \" />\n                    <span className=\"font-bold text-sm \">DDOT</span>\n                </div>{' '}\n                <div className=\" flex flex-row justify-center items-center leading-none\">\n                    <div className=\"font-light text-xs text-gray-13 dark:text-white text-center mr-1\">\n                        Contract end time:\n                    </div>\n                    <div className=\"font-medium text-xs flex\">\n                        {active ? (\n                            <StakingCountDown\n                                value={deadline}\n                                size=\"1rem\"\n                                color=\"white\"\n                            />\n                        ) : (\n                            <div className=\"bg-red-1 text-red-0 text-center font-medium rounded-md px-3 py-2  mx-auto\">\n                                Inactive\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n            <div className=\" flex flex-row justify-between mt-4\">\n                <div className=\" text-gray-13 dark:text-white  text-center flex flex-row items-center leading-none\">\n                    <div className=\"font-light text-xs  mr-1\">APR:</div>\n                    <div className=\"font-bold text-sm \">{APR}%</div>\n                </div>\n                <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\n                    <div className=\"font-light text-xs  mr-1\">\n                        Total deposit:\n                    </div>\n                    <div className=\"font-bold text-sm\">\n                        {useCurrency(totalDeposit, 0)}\n                    </div>\n                </div>\n                <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\n                    <div className=\"font-light text-xs mr-1\">Duration:</div>\n                    <div className=\"font-bold text-sm\">{duration} days</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst CollapseStaking = () => {\n    const [loadingStaking, setLoading] = useState(false)\n    const [visibleModal, setVisibleModal] = useState(false)\n    const [indexModal, setIndexModal] = useState(0)\n    const { width } = useWindowSize()\n    const { data } = useSCData()\n    const { createStake } = useSCInteractions()\n    const [theme] = useListenCookie('theme')\n    const isDarkMode = theme === 'dark'\n\n    const {\n        contractStakes,\n        userStakes,\n        userTokens,\n        isStakeholder,\n        totalUserStakes,\n    } = data\n    const handleShowModal = (index) => {\n        setVisibleModal(!visibleModal)\n        setIndexModal(index)\n    }\n    const deposit = (amount, stake) => {\n        setLoading(true)\n        const amountToStake = useAmountTo1E18(amount)\n        createStake(amountToStake, stake, (res) => {\n            if (res?.err) {\n                console.log(res)\n            }\n            setLoading(false)\n            setVisibleModal(!visibleModal)\n        })\n    }\n    if (!contractStakes || (contractStakes && contractStakes.length === 0))\n        return (\n            <div className=\"flex flex-col justify-center items-center flex-grow opacity-75\">\n                <img\n                    className=\" w-80 h-auto\"\n                    src={utilitiesImages.wallet}\n                    alt={utilitiesImages.wallet}\n                />\n                <p className=\"text-xl mt-8 font-medium\">\n                    In order to stake your wallet should\n                </p>\n                <p className=\"text-xl font-medium\">\n                    be connected to{' '}\n                    <span className=\"text-orange-2\">Destinare</span>\n                </p>\n            </div>\n        )\n    return (\n        <React.Fragment>\n            <ModalStaking\n                loadingStaking={loadingStaking}\n                index={indexModal}\n                title={'Stake tokens'}\n                visibleModal={visibleModal}\n                onCloseModal={handleShowModal}\n                deposit={deposit}\n                userTokens={userTokens}\n            />\n            {contractStakes.map((item, index) => {\n                return (\n                    <Collapse\n                        bordered={false}\n                        // collapsible=\"header\"\n                        expandIcon={({ isActive }) => (\n                            <RightOutlined\n                                className=\"text-gray-13 dark:text-white\"\n                                rotate={isActive ? 90 : 0}\n                            />\n                        )}\n                        expandIconPosition=\"right\"\n                        key={index}\n                        className=\"mb-3 rounded-xl dark:bg-gray-4\"\n                    >\n                        <Panel\n                            header={\n                                width > 425 ? (\n                                    <HeaderPanel info={item} />\n                                ) : (\n                                    <HeaderPanelMobile info={item} />\n                                )\n                            }\n                            key={index}\n                        >\n                            <div className=\"text-gray-13 dark:text-white border-t dark:border-gray-1 pt-4\">\n                                <div className=\"button-section text-right mb-4\">\n                                    {totalUserStakes >= 5 ? (\n                                        <div\n                                            className=\"alert alert-info\"\n                                            role=\"alert\"\n                                        >\n                                            You only can have 5 stakes\n                                        </div>\n                                    ) : (\n                                        <>\n                                            {userTokens > 0 ? (\n                                                <button\n                                                    onClick={() =>\n                                                        handleShowModal(index)\n                                                    }\n                                                    className=\"disabled:opacity-50 bg-primary text-white font-semibold border-none text-base px-6 py-2 rounded-md\"\n                                                    disabled={!item.active}\n                                                >\n                                                    Deposit\n                                                </button>\n                                            ) : (\n                                                <p>\n                                                    You need tokens to continue\n                                                </p>\n                                            )}\n                                        </>\n                                    )}\n                                </div>\n                                <TableStaking\n                                    stake={index}\n                                    lokedTime={item.lockedTime}\n                                    isStakeholder={isStakeholder}\n                                    userStakes={userStakes}\n                                    isDarkMode={isDarkMode}\n                                />\n                            </div>\n                        </Panel>\n                    </Collapse>\n                )\n            })}\n        </React.Fragment>\n    )\n}\n\nexport default CollapseStaking\n","export default function useAmountTo1E18(x) {\n    let amount = 0\n    if (x < 1000) {\n        amount = x * 1e18\n    } else {\n        x = x * 1e18\n        let e = parseInt(x.toString().split('+')[1])\n        e -= 20\n        x /= Math.pow(10, e)\n        x += new Array(e + 1).join('0')\n        amount = x\n    }\n    return amount.toString()\n}\n","import React from 'react'\n// import { Row, Col } from 'antd'\nimport CollapseStaking from '../components/Collapse/CollapseStaking'\nimport ReloadDataButton from '../components/ReloadButton/ReloadDataButton'\n\nconst StakingView = (props) => {\n    return (\n        <div className=\"mx-5 \" style={{ height: '100%' }}>\n            <div className=\"max-w-1650px mx-auto h-full flex flex-col pb-8\">\n                <div className=\"mb-6 mt-4 flex justify-end\">\n                    <ReloadDataButton />\n                </div>\n                <CollapseStaking />\n            </div>\n        </div>\n    )\n}\n\nexport default StakingView\n","export const cls = (input) => {\n    return input\n        .replace(/\\s+/gm, ' ')\n        .split(' ')\n        .filter((cond) => typeof cond === 'string' && cond !== 'undefined')\n        .join(' ')\n        .trim()\n}\n\nexport const escapeRegExp = (string) => {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n","/* eslint-disable no-unused-vars */\nimport React, { forwardRef } from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport { cls } from './../../services/helpers'\n\nconst classes = {\n    base: 'inline-flex items-center justify-center focus:outline-none transition ease-in-out duration-300 rounded-md gap-2',\n    disabled: 'opacity-50 cursor-not-allowed',\n    pill: 'rounded-full',\n    size: {\n        none: '',\n        small: 'px-2 py-1 text-sm',\n        normal: 'px-4 py-2',\n        large: 'px-8 py-3 text-lg',\n    },\n    variant: {\n        primary:\n            'bg-primary hover:bg-blue-green-2 focus:ring-2 focus:ring-primary focus:ring-opacity-50 text-white',\n        secondary:\n            'bg-gray-200 hover:bg-gray-800 focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 text-gray-900 hover:text-white',\n        danger: 'bg-red-500 hover:bg-red-800 focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 text-white',\n        primaryborder:\n            'border-primary border hover:bg-blue-green-2 focus:ring-2 focus:ring-primary focus:ring-opacity-50 text-primary',\n        warning:\n            'bg-yellow-600 hover:bg-yellow-600 focus:ring-2 focus:ring-yellow-600 focus:ring-opacity-50 text-white',\n        warningLink:\n            'bg-transparent hover:bg-gray-100 border border-yellow-600 focus:ring-2 focus:ring-yellow-600 focus:ring-opacity-50 text-yellow-600',\n    },\n    spinnerSize: {\n        small: 'text-xl',\n        normal: 'text-2xl',\n        large: 'text-3xl',\n    },\n}\n\nconst ButtonSpinner = forwardRef(\n    (\n        {\n            children,\n            className,\n            loading = false,\n            disabled,\n            type = 'button',\n            size = 'small',\n            variant = 'primary',\n            pill,\n            spinnerSize = 'normal',\n            ...restProps\n        },\n        ref\n    ) => {\n        return (\n            <button\n                ref={ref}\n                disabled={disabled}\n                type={type}\n                className={cls(`\n                ${classes.base}\n                ${classes.size[size]}\n                ${classes.variant[variant]}\n                ${pill && classes.pill}\n                ${disabled && classes.disabled}\n                ${className}\n            `)}\n                {...restProps}\n            >\n                {loading && (\n                    <FaSpinner\n                        className={cls(\n                            `animate-spin ${classes.spinnerSize[spinnerSize]}`\n                        )}\n                    />\n                )}\n                {children}\n            </button>\n        )\n    }\n)\n\nButtonSpinner.displayName = 'ButtonSpinner'\n\nexport default ButtonSpinner\n","import React, { forwardRef } from 'react'\nimport { cls } from './../../services/helpers'\n\nconst classes = {\n    base: 'focus:outline-none transition ease-in-out duration-300 px-1',\n    disabled: 'opacity-50 cursor-not-allowed',\n    size: {\n        small: 'px-3 py-1 text-sm',\n        normal: 'px-3 py-2',\n        large: 'px-3 py-3 text-lg',\n    },\n    variant: {\n        primary:\n            'border border-primary focus:ring-2 focus:ring-primary focus:ring-opacity-50',\n        secondary:\n            'border border-light-4 focus:ring-2 focus:ring-light-4 focus:ring-opacity-50',\n        danger: 'border border-red-500 focus:ring-2 focus:ring-red-500 focus:ring-opacity-50',\n    },\n    rounded: {\n        none: 'rounded-none',\n        small: 'rounded-sm',\n        medium: 'rounded-md',\n        large: 'rounded-lg',\n        xl: 'rounded-xl',\n    },\n}\n\nconst Input = forwardRef(\n    (\n        {\n            className,\n            disabled,\n            type = 'text',\n            size = 'small',\n            variant = 'primary',\n            rounded = 'none',\n            ...restProps\n        },\n        ref\n    ) => {\n        return (\n            <input\n                ref={ref}\n                disabled={disabled}\n                type={type}\n                className={cls(`\n                ${classes.base}\n                ${classes.size[size]}\n                ${classes.variant[variant]}\n                ${classes.rounded[rounded]}\n                ${disabled && classes.disabled}\n                ${className}\n            `)}\n                {...restProps}\n            />\n        )\n    }\n)\n\nInput.displayName = 'Input'\n\nexport default Input\n","export default __webpack_public_path__ + \"static/media/wallet2.c6e6fab9.png\";","import wallet from './wallet2.png'\n\nconst utilitiesImages = { wallet }\n\nexport default utilitiesImages\n","import { useState } from 'react'\nimport useWindowSize from './useWindowSize'\nimport useDeepCompareEffect from './useDeepCompareEffect'\n\nconst temp = (values) => {\n    for (let index = 0; index < values.length; index++) {\n        if (typeof values[index] !== 'undefined') {\n            return values[index]\n        }\n    }\n}\n\nconst useResponsive = ({ xxl, xl, lg, md, sm, base }) => {\n    const [value, setValue] = useState(() => temp([xxl, xl, lg, md, sm, base]))\n\n    const { width } = useWindowSize()\n    useDeepCompareEffect(() => {\n        if (width >= 1536) {\n            setValue(temp([xxl, xl, lg, md, sm, base]))\n        } else if (width >= 1280) {\n            setValue(temp([xl, lg, md, sm, base]))\n        } else if (width >= 1024) {\n            setValue(temp([lg, md, sm, base]))\n        } else if (width >= 768) {\n            setValue(temp([md, sm, base]))\n        } else if (width >= 640) {\n            setValue(temp([sm, base]))\n        } else {\n            setValue(base)\n        }\n    }, [width])\n    return [value]\n}\n\nexport default useResponsive\n"],"sourceRoot":""}