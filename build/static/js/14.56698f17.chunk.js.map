{"version":3,"sources":["hooks/useInput.js","services/input-services.js","components/ReloadButton/ReloadDataButton.js","components/CountDowns/StakingCountDown.js","components/Modals/ModalStaking.js","components/Buttons/ButtonSpin.js","components/Tables/TableStaking.js","hooks/useEffectOnce.js","components/Collapse/CollapseStaking.js","hooks/useAmountTo1E18.js","views/StakingView.js","services/helpers.js","components/Buttons/ButtonSpinner.js","components/Inputs/Input.js","assets/images/utilities/wallet2.png","assets/images/utilities/index.js","hooks/useResponsive.js"],"names":["useInput","initialValue","validate","format","useState","value","setValue","console","log","reset","bind","onChange","e","target","inputRegex","RegExp","validOnlyNumbers","test","escapeRegExp","validMinValue","minValue","parseFloat","replace","validMaxValue","maxValue","ReloadDataButton","reloadData","useSCInteractions","fetchingData","useSCData","fetching","disabled","className","onClick","cls","size","Countdown","Statistic","onFinish","StakingCountDown","color","valueStyle","fontSize","lineHeight","formattedCurrency","v","formatNumber","formatDDOT","num","includes","split","parseInt","ModalStaking","index","title","visibleModal","onCloseModal","deposit","userTokens","loadingStaking","tokens","Math","floor","amount","useResponsive","base","md","lg","xl","widthModal","useEffect","visible","onCancel","width","maskClosable","footer","toString","Input","variant","onBlur","addDecimal","type","ButtonSpinner","Number","loading","antIcon","LoadingOutlined","style","spin","ButtonSpin","textLoading","children","restProps","indicator","Fragment","columns","dataIndex","key","ellipsis","customizeRenderEmpty","InboxOutlined","UnStake","cb","item","lockDuration","getReward","setLoading","enableUnstake","setEnableUnstake","lockDurationEnd","today","Date","ends","getTime","useInterval","res","err","TableStaking","stake","lokedTime","isStakeholder","userStakes","isDarkMode","widthCell","data","reduce","acc","i","reward","date","stakeTime","toLocaleString","depositAmount","tokensLocked","deposit_date","deposit_amount","useCurrency","lock_duration","unStake","renderEmpty","pagination","dataSource","bordered","scroll","x","Panel","Collapse","HeaderPanel","info","APR","lockedTime","totalDeposit","active","duration","now","ceil","HeaderPanelMobile","deadline","CollapseStaking","setVisibleModal","indexModal","setIndexModal","useWindowSize","createStake","useListenCookie","contractStakes","totalUserStakes","handleShowModal","length","src","utilitiesImages","wallet","alt","amountToStake","pow","Array","join","useAmountTo1E18","map","expandIcon","isActive","RightOutlined","rotate","expandIconPosition","header","role","StakingView","props","height","input","filter","cond","trim","string","classes","pill","none","small","normal","large","primary","secondary","danger","primaryborder","warning","warningLink","spinnerSize","forwardRef","ref","displayName","rounded","medium","temp","values","xxl","sm","useDeepCompareEffect"],"mappings":"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","file":"static/js/14.56698f17.chunk.js","sourcesContent":["/* eslint-disable prefer-const */\r\nimport { useState } from 'react'\r\n\r\nconst useInput = (initialValue = '', validate, format) => {\r\n    const [value, setValue] = useState(initialValue)\r\n    console.log(initialValue)\r\n    return {\r\n        value,\r\n        setValue,\r\n        reset: () => setValue(initialValue),\r\n        bind: {\r\n            value,\r\n            onChange: (e) => {\r\n                let value = e.target.value\r\n\r\n                if (\r\n                    (typeof validate === 'function' &&\r\n                        validate(e.target.value)) ||\r\n                    typeof validate !== 'function'\r\n                ) {\r\n                    if (typeof format === 'function') value = format(value)\r\n                    setValue(value)\r\n                }\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nexport default useInput\r\n","/* eslint-disable prefer-regex-literals */\r\nimport { escapeRegExp } from './helpers'\r\n\r\nexport const onlyNumberKey = (evt) => {\r\n    const ASCIICode = evt.which ? evt.which : evt.keyCode\r\n    if (ASCIICode > 31 && (ASCIICode < 48 || ASCIICode > 57))\r\n        evt.preventDefault()\r\n}\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`)\r\n\r\nexport const validOnlyNumbers = (value) => {\r\n    if (value === '' || inputRegex.test(escapeRegExp(value))) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport const validMinValue = (minValue) => (value) => {\r\n    if (\r\n        value === '' ||\r\n        (value && parseFloat(value.replace(/,/g, '')) >= minValue)\r\n    ) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport const validMaxValue = (maxValue) => (value) => {\r\n    if (\r\n        value === '' ||\r\n        (value && parseFloat(value.replace(/,/g, '')) <= maxValue)\r\n    ) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport const formatThousand = (v) =>\r\n    `${v}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\r\n","import React from 'react'\r\n// import { Spin } from 'antd'\r\n// import { LoadingOutlined } from '@ant-design/icons'\r\n\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport { useSCData } from '../../store/reducers/scInteractionReducer/hooks'\r\n// import ButtonSpinner from '../Buttons/ButtonSpinner'\r\nimport IconRefresh from './../../assets/svg/icons/IconRefresh'\r\nimport { cls } from './../../services/helpers'\r\n\r\n// const antIcon = (\r\n//     <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\r\n// )\r\n\r\nconst ReloadDataButton = () => {\r\n    const { reloadData } = useSCInteractions()\r\n    const { fetching: fetchingData } = useSCData()\r\n    return (\r\n        <button\r\n            disabled={fetchingData}\r\n            className=\"flex items-start justify-center\"\r\n            onClick={() => {\r\n                reloadData(true)\r\n            }}\r\n        >\r\n            <div className=\"h-8 w-8 lg:h-9 lg:w-9\">\r\n                <IconRefresh\r\n                    className={cls(`${fetchingData && 'animate-spin'}`)}\r\n                    size={'100%'}\r\n                />\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ReloadDataButton\r\n","import { Statistic } from 'antd'\r\nimport { FaRegClock } from 'react-icons/fa'\r\nconst { Countdown } = Statistic\r\n\r\nfunction onFinish() {\r\n    console.log('finished!')\r\n}\r\n\r\nconst StakingCountDown = ({ value, size = '1.1rem', color = '#fff' }) => {\r\n    return (\r\n        <div className=\"flex flex-row justify-center items-center bg-benefits-blue-1 text-white px-3 border rounded-xl font-bold text-sm py-1\">\r\n            <FaRegClock className=\"mr-1\" size={size} color={color} />\r\n            <Countdown\r\n                className=\"text-xxs\"\r\n                value={value}\r\n                format=\"DD:HH:mm:ss\"\r\n                valueStyle={{\r\n                    fontSize: size,\r\n                    color,\r\n                    lineHeight: 0,\r\n                }}\r\n                onFinish={onFinish}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default StakingCountDown\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useEffect } from 'react'\r\nimport { Modal } from 'antd'\r\n// import InputStaking from '../Inputs/InputStaking'\r\nimport useResponsive from '../../hooks/useResponsive'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport useInput from './../../hooks/useInput'\r\nimport Input from './../Inputs/Input'\r\nimport ButtonSpinner from './../Buttons/ButtonSpinner'\r\nimport {\r\n    validMinValue,\r\n    validMaxValue,\r\n    validOnlyNumbers,\r\n} from './../../services/input-services'\r\nimport formatNumber from 'format-number'\r\n\r\nconst minValue = validMinValue(0)\r\n\r\nconst formattedCurrency = (v) =>\r\n    formatNumber({})(v, {\r\n        // noSeparator: true,\r\n    })\r\n\r\nconst formatDDOT = (v) => {\r\n    if (v === '') return '0'\r\n\r\n    let num = v.replace(/,/g, '')\r\n\r\n    if (!num.includes('.')) return formattedCurrency(parseInt(num))\r\n    num = num.split('.')\r\n\r\n    return `${formattedCurrency(parseInt(num[0]))}.${num[1]}`\r\n}\r\n\r\nconst addDecimal = (v) => {\r\n    console.log('entro')\r\n    if (v === '') return '0'\r\n\r\n    let num = v.replace(/,/g, '')\r\n\r\n    if (!num.includes('.')) return formattedCurrency(parseInt(num))\r\n    num = num.split('.')\r\n\r\n    return `${formattedCurrency(parseInt(num[0]))}.${\r\n        num[1] !== '' ? num[1] : '0'\r\n    }`\r\n}\r\n\r\nconst ModalStaking = ({\r\n    index,\r\n    title,\r\n    visibleModal,\r\n    onCloseModal,\r\n    deposit,\r\n    userTokens,\r\n    loadingStaking,\r\n}) => {\r\n    userTokens = userTokens / 1e18\r\n    const tokens = Math.floor(userTokens)\r\n    const maxValue = validMaxValue(tokens)\r\n    const {\r\n        value: amount,\r\n        bind,\r\n        setValue,\r\n        reset,\r\n    } = useInput(\r\n        '0',\r\n        (v) =>\r\n            minValue(v) && maxValue(v) && validOnlyNumbers(v.replace(/,/g, '')),\r\n        formatDDOT\r\n    )\r\n    // const [amount, setAmount] = useState(0)\r\n    const [widthModal] = useResponsive({\r\n        base: '100%',\r\n        md: '70%',\r\n        lg: '50%',\r\n        xl: '30%',\r\n    })\r\n\r\n    const getDdot = () => {\r\n        console.log('get ddot')\r\n    }\r\n\r\n    const handleOnCloseModal = () => {\r\n        onCloseModal()\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        // console.log(Number(values.stakingAmount))\r\n        deposit(Number(amount.replace(/,/g, '')), index)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (visibleModal) reset()\r\n    }, [visibleModal])\r\n\r\n    return (\r\n        <Modal\r\n            title={title}\r\n            visible={visibleModal}\r\n            onCancel={onCloseModal}\r\n            width={widthModal}\r\n            maskClosable={false}\r\n            footer={null}\r\n        >\r\n            <div>\r\n                <div className=\"mb-2\">\r\n                    <div className=\"flex justify-between items-center\">\r\n                        <p className=\"font-bold text-base\">Stake</p>\r\n                        <p className=\"font-bold text-base\">\r\n                            Balance:{' '}\r\n                            <span className=\"font-normal\">\r\n                                {formatDDOT(userTokens.toString())}\r\n                            </span>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                        <div className=\"  flex flex-row items-start\">\r\n                            <div className=\"mr-2\">\r\n                                <Input\r\n                                    variant=\"secondary\"\r\n                                    className=\"mr-2 w-full\"\r\n                                    onBlur={() => {\r\n                                        setValue(addDecimal(amount))\r\n                                    }}\r\n                                    {...bind}\r\n                                />\r\n                            </div>\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"disabled:opacity-50 bg-primary rounded-md py-1 px-3 text-white text-base font-bold\"\r\n                                onClick={() => {\r\n                                    setValue(formatDDOT(tokens.toString()))\r\n                                    // setFieldValue('stakingAmount', tokens)\r\n                                }}\r\n                            >\r\n                                MAX\r\n                            </button>\r\n                        </div>\r\n                        <p className=\"text-2xl font-bold\">DDOT</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-8\">\r\n                    {/* <div className=\"flex justify-between items-center mb-4\">\r\n                                <p className=\"text-base\">\r\n                                    Annual ROI at current rates:\r\n                                </p>\r\n                                <p className=\"text-base font-bold\">$0,00</p>\r\n                            </div> */}\r\n                    <div className=\"flex justify-around items-center mb-5\">\r\n                        <ButtonSpinner\r\n                            size=\"none\"\r\n                            variant=\"primaryborder\"\r\n                            className=\"py-1 px-10 text-lg font-bold\"\r\n                            disabled={loadingStaking}\r\n                            onClick={handleOnCloseModal}\r\n                            // className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 px-10 text-white text-lg font-bold\"\r\n                        >\r\n                            Cancel\r\n                        </ButtonSpinner>\r\n                        <ButtonSpinner\r\n                            size=\"none\"\r\n                            className=\"py-1 px-10 text-lg font-bold\"\r\n                            // className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 px-10 text-white text-lg font-bold\"\r\n                            disabled={loadingStaking || Number(amount) <= 0}\r\n                            loading={loadingStaking}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            Confirm\r\n                        </ButtonSpinner>\r\n                    </div>\r\n                    {/* <div className=\"text-center\">\r\n                        <p\r\n                            onClick={() => getDdot()}\r\n                            className=\"font-bold text-xl text-primary cursor-pointer\"\r\n                        >\r\n                            Get DDOT\r\n                        </p>\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalStaking\r\n","import React from 'react'\r\nimport { Spin } from 'antd'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\n\r\nconst antIcon = (\r\n    <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\r\n)\r\n\r\nconst ButtonSpin = ({\r\n    loading,\r\n    disabled,\r\n    textLoading,\r\n    children,\r\n    ...restProps\r\n}) => {\r\n    return (\r\n        <button\r\n            className=\" bg-primary text-lg px-12 py-2 rounded-md text-white disabled:opacity-50\"\r\n            disabled={disabled}\r\n            {...restProps}\r\n        >\r\n            {loading ? (\r\n                <span>\r\n                    <span className=\"pr-2\">\r\n                        <Spin indicator={antIcon} />\r\n                    </span>\r\n                    {textLoading}\r\n                </span>\r\n            ) : (\r\n                <React.Fragment> {children}</React.Fragment>\r\n            )}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonSpin\r\n","import { useState } from 'react'\r\nimport { ConfigProvider, Table } from 'antd'\r\nimport { InboxOutlined } from '@ant-design/icons'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport StakingCountDown from '../CountDowns/StakingCountDown'\r\nimport useInterval from './../../hooks/useInterval'\r\nimport useEffectOnce from './../../hooks/useEffectOnce'\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport ButtonSpin from '../Buttons/ButtonSpin'\r\nimport useResponsive from './../../hooks/useResponsive'\r\nimport { cls } from './../../services/helpers'\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Deposit date',\r\n        dataIndex: 'deposit_date',\r\n        key: 'deposit_date',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Deposit amount',\r\n        dataIndex: 'deposit_amount',\r\n        key: 'deposit_amount',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Reward',\r\n        dataIndex: 'reward',\r\n        key: 'reward',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: 'Lock duration',\r\n        dataIndex: 'lock_duration',\r\n        key: 'lock_duration',\r\n        ellipsis: true,\r\n    },\r\n    {\r\n        title: '',\r\n        dataIndex: 'unStake',\r\n        key: 'unStake',\r\n        ellipsis: true,\r\n    },\r\n]\r\n\r\nconst customizeRenderEmpty = () => (\r\n    <div className=\"text-center\">\r\n        <InboxOutlined style={{ fontSize: 40 }} />\r\n        <p>No Data</p>\r\n    </div>\r\n)\r\n\r\nconst UnStake = ({ item, lockDuration }) => {\r\n    const { getReward } = useSCInteractions()\r\n    const [loading, setLoading] = useState(false)\r\n    const [enableUnstake, setEnableUnstake] = useState(false)\r\n\r\n    const lockDurationEnd = () => {\r\n        const today = new Date()\r\n        const ends = new Date(lockDuration)\r\n        setEnableUnstake(today.getTime() > ends.getTime())\r\n    }\r\n\r\n    useEffectOnce(() => {\r\n        lockDurationEnd()\r\n    })\r\n\r\n    useInterval(\r\n        () => {\r\n            lockDurationEnd()\r\n        },\r\n        !enableUnstake ? 500 : null\r\n    )\r\n\r\n    const handleUnstake = () => {\r\n        setLoading(true)\r\n        getReward(item, (res) => {\r\n            if (res?.err) {\r\n                console.log(res)\r\n            }\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex w-full\">\r\n            <ButtonSpin\r\n                onClick={handleUnstake}\r\n                className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 w-full md:w-8/12 text-white text-lg font-bold mx-auto\"\r\n                disabled={!enableUnstake || loading}\r\n                loading={loading}\r\n            >\r\n                Unstake\r\n            </ButtonSpin>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TableStaking = ({\r\n    stake,\r\n    lokedTime,\r\n    isStakeholder,\r\n    userStakes,\r\n    getReward,\r\n    isDarkMode,\r\n}) => {\r\n    const [widthCell] = useResponsive({ base: 150, md: '100%' })\r\n\r\n    const data = userStakes.reduce((acc, item, i) => {\r\n        if (Number(item.type) === stake && item.reward != null) {\r\n            const date = new Date(item.stakeTime * 1000).toLocaleString('en-GB')\r\n            const depositAmount = item.tokensLocked / 1e18\r\n            const reward =\r\n                (Number(item.reward) - Number(item.tokensLocked)) / 1e18\r\n            let lockDuration = Number(item.stakeTime) + Number(lokedTime)\r\n            console.log({ item })\r\n            lockDuration = lockDuration * 1000\r\n            return [\r\n                ...acc,\r\n                {\r\n                    key: i,\r\n                    deposit_date: date,\r\n                    deposit_amount: useCurrency(depositAmount, 0),\r\n                    reward: useCurrency(reward, 2),\r\n                    lock_duration: (\r\n                        <StakingCountDown\r\n                            value={lockDuration}\r\n                            size=\"1rem\"\r\n                            color=\"white\"\r\n                        />\r\n                    ),\r\n                    width: 100,\r\n                    unStake: (\r\n                        <UnStake\r\n                            item={i}\r\n                            getReward={getReward}\r\n                            lockDuration={lockDuration}\r\n                        />\r\n                    ),\r\n                },\r\n            ]\r\n        }\r\n        return acc\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"table-info overflow-y-auto \">\r\n            {isStakeholder && (\r\n                <ConfigProvider renderEmpty={customizeRenderEmpty}>\r\n                    <Table\r\n                        pagination={false}\r\n                        columns={columns.reduce(\r\n                            (acc, v) => [...acc, { ...v, width: widthCell }],\r\n                            []\r\n                        )}\r\n                        dataSource={data}\r\n                        className={cls(\r\n                            `${isDarkMode && 'ant-table-wrapper-dark'}`\r\n                        )}\r\n                        bordered\r\n                        scroll={{ x: '100%' }}\r\n                    />\r\n                </ConfigProvider>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default TableStaking\r\n","import { useEffect } from 'react'\r\n\r\nexport default function useEffectOnce(cb) {\r\n    useEffect(cb, [])\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react'\r\nimport { Collapse } from 'antd'\r\nimport useAmountTo1E18 from '../../hooks/useAmountTo1E18'\r\nimport StakingCountDown from '../CountDowns/StakingCountDown'\r\nimport ModalStaking from '../Modals/ModalStaking'\r\nimport TableStaking from '../Tables/TableStaking'\r\nimport useCurrency from '../../hooks/useCurrency'\r\nimport { RightOutlined } from '@ant-design/icons'\r\nimport { ImagotipoSVG } from '../../assets/svg/home'\r\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\r\nimport { useSCData } from '../../store/reducers/scInteractionReducer/hooks'\r\nimport useWindowSize from './../../hooks/useWindowSize'\r\nimport useResponsive from './../../hooks/useResponsive'\r\nimport useListenCookie from '../../hooks/useListenCookie'\r\nimport utilitiesImages from './../../assets/images/utilities/index'\r\nconst { Panel } = Collapse\r\n\r\nconst HeaderPanel = ({ info: { APR, lockedTime, totalDeposit, active } }) => {\r\n    totalDeposit = totalDeposit / 1e18\r\n    const duration = lockedTime * (1 / 86400)\r\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\r\n    return (\r\n        <div className=\"w-full flex flex-row justify-between items-center py-2\">\r\n            <div className=\" flex flex-row text-gray-13 dark:text-white items-center leading-none\">\r\n                <ImagotipoSVG className=\"w-9 mr-2 \" />\r\n                <span className=\"font-bold text-sm md:text-lg \">DDOT</span>\r\n            </div>\r\n            <div className=\" text-gray-13 dark:text-white  text-center flex flex-row items-center leading-none\">\r\n                <div className=\"font-light text-sm md:text-sm mr-1\">APR:</div>\r\n                <div className=\"font-bold text-xxs md:text-base\">{APR}%</div>\r\n            </div>\r\n            <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\r\n                <div className=\"font-light text-xs md:text-sm mr-1\">\r\n                    Total deposit:\r\n                </div>\r\n                <div className=\"font-bold text-xxs md:text-base\">\r\n                    {useCurrency(totalDeposit, 0)}\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"text-gray-13 dark:text-white\">\r\n                <p className=\"font-light text-lg\">Max cap</p>\r\n                <p className=\"font-bold text-base\">{}</p>\r\n            </div> */}\r\n            <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\r\n                <div className=\"font-light text-xs md:text-sm mr-1 \">\r\n                    Duration:\r\n                </div>\r\n                <div className=\"font-bold text-xxs md:text-base \">\r\n                    {Math.ceil(duration)} days\r\n                </div>\r\n            </div>\r\n            <div className=\" flex flex-row justify-center items-center leading-none\">\r\n                {!active && (\r\n                    <div className=\"bg-red-300 text-red-0 text-center rounded-md px-3 py-1  mx-auto font-medium text-xs md:text-sm \">\r\n                        Inactive\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst HeaderPanelMobile = ({\r\n    info: { APR, lockedTime, totalDeposit, active },\r\n}) => {\r\n    totalDeposit = totalDeposit / 1e18\r\n    const duration = lockedTime * (1 / 86400)\r\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\r\n    return (\r\n        <div className=\"w-full py-2\">\r\n            <div className=\"flex flex-row justify-between\">\r\n                <div className=\" flex flex-row text-gray-13 dark:text-white items-center leading-none\">\r\n                    <ImagotipoSVG className=\"w-9 mr-2 \" />\r\n                    <span className=\"font-bold text-sm \">DDOT</span>\r\n                </div>{' '}\r\n                <div className=\" flex flex-row justify-center items-center leading-none\">\r\n                    <div className=\"font-light text-xs text-gray-13 dark:text-white text-center mr-1\">\r\n                        Contract end time:\r\n                    </div>\r\n                    <div className=\"font-medium text-xs flex\">\r\n                        {active ? (\r\n                            <StakingCountDown\r\n                                value={deadline}\r\n                                size=\"1rem\"\r\n                                color=\"white\"\r\n                            />\r\n                        ) : (\r\n                            <div className=\"bg-red-1 text-red-0 text-center font-medium rounded-md px-3 py-2  mx-auto\">\r\n                                Inactive\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\" flex flex-row justify-between mt-4\">\r\n                <div className=\" text-gray-13 dark:text-white  text-center flex flex-row items-center leading-none\">\r\n                    <div className=\"font-light text-xs  mr-1\">APR:</div>\r\n                    <div className=\"font-bold text-sm \">{APR}%</div>\r\n                </div>\r\n                <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\r\n                    <div className=\"font-light text-xs  mr-1\">\r\n                        Total deposit:\r\n                    </div>\r\n                    <div className=\"font-bold text-sm\">\r\n                        {useCurrency(totalDeposit, 0)}\r\n                    </div>\r\n                </div>\r\n                <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\r\n                    <div className=\"font-light text-xs mr-1\">Duration:</div>\r\n                    <div className=\"font-bold text-sm\">{duration} days</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CollapseStaking = () => {\r\n    const [loadingStaking, setLoading] = useState(false)\r\n    const [visibleModal, setVisibleModal] = useState(false)\r\n    const [indexModal, setIndexModal] = useState(0)\r\n    const { width } = useWindowSize()\r\n    const { data } = useSCData()\r\n    const { createStake } = useSCInteractions()\r\n    const [theme] = useListenCookie('theme')\r\n    const isDarkMode = theme === 'dark'\r\n\r\n    const {\r\n        contractStakes,\r\n        userStakes,\r\n        userTokens,\r\n        isStakeholder,\r\n        totalUserStakes,\r\n    } = data\r\n    const handleShowModal = (index) => {\r\n        setVisibleModal(!visibleModal)\r\n        setIndexModal(index)\r\n    }\r\n    const deposit = (amount, stake) => {\r\n        setLoading(true)\r\n        const amountToStake = useAmountTo1E18(amount)\r\n        createStake(amountToStake, stake, (res) => {\r\n            if (res?.err) {\r\n                console.log(res)\r\n            }\r\n            setLoading(false)\r\n            setVisibleModal(!visibleModal)\r\n        })\r\n    }\r\n    if (!contractStakes || (contractStakes && contractStakes.length === 0))\r\n        return (\r\n            <div className=\"flex flex-col justify-center items-center flex-grow opacity-75\">\r\n                <img\r\n                    className=\" w-80 h-auto\"\r\n                    src={utilitiesImages.wallet}\r\n                    alt={utilitiesImages.wallet}\r\n                />\r\n                <p className=\"text-xl mt-8 font-medium\">\r\n                    In order to stake your wallet should\r\n                </p>\r\n                <p className=\"text-xl font-medium\">\r\n                    be connected to{' '}\r\n                    <span className=\"text-orange-2\">Destinare</span>\r\n                </p>\r\n            </div>\r\n        )\r\n    return (\r\n        <React.Fragment>\r\n            <ModalStaking\r\n                loadingStaking={loadingStaking}\r\n                index={indexModal}\r\n                title={'Stake tokens'}\r\n                visibleModal={visibleModal}\r\n                onCloseModal={handleShowModal}\r\n                deposit={deposit}\r\n                userTokens={userTokens}\r\n            />\r\n            {contractStakes.map((item, index) => {\r\n                return (\r\n                    <Collapse\r\n                        bordered={false}\r\n                        // collapsible=\"header\"\r\n                        expandIcon={({ isActive }) => (\r\n                            <RightOutlined\r\n                                className=\"text-gray-13 dark:text-white\"\r\n                                rotate={isActive ? 90 : 0}\r\n                            />\r\n                        )}\r\n                        expandIconPosition=\"right\"\r\n                        key={index}\r\n                        className=\"mb-3 rounded-xl dark:bg-gray-4\"\r\n                    >\r\n                        <Panel\r\n                            header={\r\n                                width > 425 ? (\r\n                                    <HeaderPanel info={item} />\r\n                                ) : (\r\n                                    <HeaderPanelMobile info={item} />\r\n                                )\r\n                            }\r\n                            key={index}\r\n                        >\r\n                            <div className=\"text-gray-13 dark:text-white border-t dark:border-gray-1 pt-4\">\r\n                                <div className=\"button-section text-right mb-4\">\r\n                                    {totalUserStakes >= 5 ? (\r\n                                        <div\r\n                                            className=\"alert alert-info\"\r\n                                            role=\"alert\"\r\n                                        >\r\n                                            You only can have 5 stakes\r\n                                        </div>\r\n                                    ) : (\r\n                                        <>\r\n                                            {userTokens > 0 ? (\r\n                                                <button\r\n                                                    onClick={() =>\r\n                                                        handleShowModal(index)\r\n                                                    }\r\n                                                    className=\"disabled:opacity-50 bg-primary text-white font-semibold border-none text-base px-6 py-2 rounded-md\"\r\n                                                    disabled={!item.active}\r\n                                                >\r\n                                                    Deposit\r\n                                                </button>\r\n                                            ) : (\r\n                                                <p>\r\n                                                    You need tokens to continue\r\n                                                </p>\r\n                                            )}\r\n                                        </>\r\n                                    )}\r\n                                </div>\r\n                                <TableStaking\r\n                                    stake={index}\r\n                                    lokedTime={item.lockedTime}\r\n                                    isStakeholder={isStakeholder}\r\n                                    userStakes={userStakes}\r\n                                    isDarkMode={isDarkMode}\r\n                                />\r\n                            </div>\r\n                        </Panel>\r\n                    </Collapse>\r\n                )\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CollapseStaking\r\n","export default function useAmountTo1E18(x) {\r\n    let amount = 0\r\n    if (x < 1000) {\r\n        amount = x * 1e18\r\n    } else {\r\n        x = x * 1e18\r\n        let e = parseInt(x.toString().split('+')[1])\r\n        e -= 20\r\n        x /= Math.pow(10, e)\r\n        x += new Array(e + 1).join('0')\r\n        amount = x\r\n    }\r\n    return amount.toString()\r\n}\r\n","import React from 'react'\r\n// import { Row, Col } from 'antd'\r\nimport CollapseStaking from '../components/Collapse/CollapseStaking'\r\nimport ReloadDataButton from '../components/ReloadButton/ReloadDataButton'\r\n\r\nconst StakingView = (props) => {\r\n    return (\r\n        <div className=\"mx-5 \" style={{ height: '100%' }}>\r\n            <div className=\"max-w-1650px mx-auto h-full flex flex-col pb-8\">\r\n                <div className=\"mb-6 mt-4 flex justify-end\">\r\n                    <ReloadDataButton />\r\n                </div>\r\n                <CollapseStaking />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StakingView\r\n","export const cls = (input) => {\n    return input\n        .replace(/\\s+/gm, ' ')\n        .split(' ')\n        .filter((cond) => typeof cond === 'string' && cond !== 'undefined')\n        .join(' ')\n        .trim()\n}\n\nexport const escapeRegExp = (string) => {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n","/* eslint-disable no-unused-vars */\r\nimport React, { forwardRef } from 'react'\r\nimport { FaSpinner } from 'react-icons/fa'\r\nimport { cls } from './../../services/helpers'\r\n\r\nconst classes = {\r\n    base: 'inline-flex items-center justify-center focus:outline-none transition ease-in-out duration-300 rounded-md gap-2',\r\n    disabled: 'opacity-50 cursor-not-allowed',\r\n    pill: 'rounded-full',\r\n    size: {\r\n        none: '',\r\n        small: 'px-2 py-1 text-sm',\r\n        normal: 'px-4 py-2',\r\n        large: 'px-8 py-3 text-lg',\r\n    },\r\n    variant: {\r\n        primary:\r\n            'bg-primary hover:bg-blue-green-2 focus:ring-2 focus:ring-primary focus:ring-opacity-50 text-white',\r\n        secondary:\r\n            'bg-gray-200 hover:bg-gray-800 focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 text-gray-900 hover:text-white',\r\n        danger: 'bg-red-500 hover:bg-red-800 focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 text-white',\r\n        primaryborder:\r\n            'border-primary border hover:bg-blue-green-2 focus:ring-2 focus:ring-primary focus:ring-opacity-50 text-primary',\r\n        warning:\r\n            'bg-yellow-600 hover:bg-yellow-600 focus:ring-2 focus:ring-yellow-600 focus:ring-opacity-50 text-white',\r\n        warningLink:\r\n            'bg-transparent hover:bg-gray-100 border border-yellow-600 focus:ring-2 focus:ring-yellow-600 focus:ring-opacity-50 text-yellow-600',\r\n    },\r\n    spinnerSize: {\r\n        small: 'text-xl',\r\n        normal: 'text-2xl',\r\n        large: 'text-3xl',\r\n    },\r\n}\r\n\r\nconst ButtonSpinner = forwardRef(\r\n    (\r\n        {\r\n            children,\r\n            className,\r\n            loading = false,\r\n            disabled,\r\n            type = 'button',\r\n            size = 'small',\r\n            variant = 'primary',\r\n            pill,\r\n            spinnerSize = 'normal',\r\n            ...restProps\r\n        },\r\n        ref\r\n    ) => {\r\n        return (\r\n            <button\r\n                ref={ref}\r\n                disabled={disabled}\r\n                type={type}\r\n                className={cls(`\r\n                ${classes.base}\r\n                ${classes.size[size]}\r\n                ${classes.variant[variant]}\r\n                ${pill && classes.pill}\r\n                ${disabled && classes.disabled}\r\n                ${className}\r\n            `)}\r\n                {...restProps}\r\n            >\r\n                {loading && (\r\n                    <FaSpinner\r\n                        className={cls(\r\n                            `animate-spin ${classes.spinnerSize[spinnerSize]}`\r\n                        )}\r\n                    />\r\n                )}\r\n                {children}\r\n            </button>\r\n        )\r\n    }\r\n)\r\n\r\nButtonSpinner.displayName = 'ButtonSpinner'\r\n\r\nexport default ButtonSpinner\r\n","import React, { forwardRef } from 'react'\nimport { cls } from './../../services/helpers'\n\nconst classes = {\n    base: 'focus:outline-none transition ease-in-out duration-300 px-1',\n    disabled: 'opacity-50 cursor-not-allowed',\n    size: {\n        small: 'px-3 py-1 text-sm',\n        normal: 'px-3 py-2',\n        large: 'px-3 py-3 text-lg',\n    },\n    variant: {\n        primary:\n            'border border-primary focus:ring-2 focus:ring-primary focus:ring-opacity-50',\n        secondary:\n            'border border-light-4 focus:ring-2 focus:ring-light-4 focus:ring-opacity-50',\n        danger: 'border border-red-500 focus:ring-2 focus:ring-red-500 focus:ring-opacity-50',\n    },\n    rounded: {\n        none: 'rounded-none',\n        small: 'rounded-sm',\n        medium: 'rounded-md',\n        large: 'rounded-lg',\n        xl: 'rounded-xl',\n    },\n}\n\nconst Input = forwardRef(\n    (\n        {\n            className,\n            disabled,\n            type = 'text',\n            size = 'small',\n            variant = 'primary',\n            rounded = 'none',\n            ...restProps\n        },\n        ref\n    ) => {\n        return (\n            <input\n                ref={ref}\n                disabled={disabled}\n                type={type}\n                className={cls(`\n                ${classes.base}\n                ${classes.size[size]}\n                ${classes.variant[variant]}\n                ${classes.rounded[rounded]}\n                ${disabled && classes.disabled}\n                ${className}\n            `)}\n                {...restProps}\n            />\n        )\n    }\n)\n\nInput.displayName = 'Input'\n\nexport default Input\n","export default __webpack_public_path__ + \"static/media/wallet2.c6e6fab9.png\";","import wallet from './wallet2.png'\r\n\r\nconst utilitiesImages = { wallet }\r\n\r\nexport default utilitiesImages\r\n","import { useState } from 'react'\nimport useWindowSize from './useWindowSize'\nimport useDeepCompareEffect from './useDeepCompareEffect'\n\nconst temp = (values) => {\n    for (let index = 0; index < values.length; index++) {\n        if (typeof values[index] !== 'undefined') {\n            return values[index]\n        }\n    }\n}\n\nconst useResponsive = ({ xxl, xl, lg, md, sm, base }) => {\n    const [value, setValue] = useState(() => temp([xxl, xl, lg, md, sm, base]))\n\n    const { width } = useWindowSize()\n    useDeepCompareEffect(() => {\n        if (width >= 1536) {\n            setValue(temp([xxl, xl, lg, md, sm, base]))\n        } else if (width >= 1280) {\n            setValue(temp([xl, lg, md, sm, base]))\n        } else if (width >= 1024) {\n            setValue(temp([lg, md, sm, base]))\n        } else if (width >= 768) {\n            setValue(temp([md, sm, base]))\n        } else if (width >= 640) {\n            setValue(temp([sm, base]))\n        } else {\n            setValue(base)\n        }\n    }, [width])\n    return [value]\n}\n\nexport default useResponsive\n"],"sourceRoot":""}