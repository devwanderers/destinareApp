{"version":3,"sources":["components/CountDowns/StakingCountDown.js","services/yupValidations.js","components/CreateAntField/index.js","components/Buttons/ButtonSpin.js","components/Modals/ModalStaking.js","components/Tables/TableStaking.js","hooks/useEffectOnce.js","components/Collapse/CollapseStaking.js","hooks/useAmountTo1E18.js","views/StakingView.js","services/helpers.js","hooks/useResponsive.js","components/ReloadButton/ReloadDataButton.js"],"names":["Countdown","Statistic","onFinish","console","log","StakingCountDown","value","size","color","className","format","valueStyle","fontSize","lineHeight","SUPPORTED_FORMATS","regex","validations","Yup","min","max","matches","required","oneOf","test","validator","isAlphanumeric","email","lowercase","isAlpha","replace","includes","type","_v","parseFloat","s","Option","style","totalTokens","FormItem","Form","Item","Select","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","props","touched","name","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","AntInput","DatePicker","Input","Password","TimePicker","antIcon","LoadingOutlined","spin","ButtonSpin","loading","disabled","textLoading","children","restProps","indicator","Fragment","initialValues","stakingAmount","ModalStaking","index","title","visibleModal","onCloseModal","deposit","userTokens","loadingStaking","useResponsive","base","md","lg","xl","widthModal","tokens","toFixed","schema","visible","onCancel","width","maskClosable","footer","centered","validationSchema","onSubmit","values","resetForm","Number","isSubmitting","isValid","isInitialValid","useCurrency","component","placeholder","onClick","handleOnCloseModal","columns","dataIndex","key","ellipsis","customizeRenderEmpty","InboxOutlined","UnStake","cb","item","lockDuration","getReward","useSCInteractions","useState","setLoading","enableUnstake","setEnableUnstake","lockDurationEnd","today","Date","ends","getTime","useEffect","useInterval","res","err","TableStaking","stake","lokedTime","isStakeholder","userStakes","isDarkMode","widthCell","data","reduce","acc","i","reward","date","stakeTime","toLocaleString","depositAmount","tokensLocked","deposit_date","deposit_amount","lock_duration","unStake","renderEmpty","pagination","v","dataSource","cls","bordered","scroll","x","Panel","Collapse","HeaderPanel","info","APR","lockedTime","totalDeposit","active","duration","deadline","now","Math","ceil","HeaderPanelMobile","CollapseStaking","setVisibleModal","indexModal","setIndexModal","useWindowSize","useSCData","createStake","useListenCookie","contractStakes","totalUserStakes","handleShowModal","amount","amountToStake","e","parseInt","toString","split","pow","Array","join","useAmountTo1E18","expandIcon","isActive","RightOutlined","rotate","expandIconPosition","header","role","StakingView","ReloadDataButton","input","filter","cond","trim","escapeRegExp","string","temp","length","xxl","sm","setValue","useDeepCompareEffect","reloadData","fetchingData","fetching"],"mappings":"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","file":"static/js/9.ea9f10f4.chunk.js","sourcesContent":["import { Statistic } from 'antd'\nimport { FaRegClock } from 'react-icons/fa'\nconst { Countdown } = Statistic\n\nfunction onFinish() {\n    console.log('finished!')\n}\n\nconst StakingCountDown = ({ value, size = '1.1rem', color = '#fff' }) => {\n    return (\n        <div className=\"flex flex-row justify-center items-center bg-benefits-blue-1 text-white px-3 border rounded-xl font-bold text-sm py-1\">\n            <FaRegClock className=\"mr-1\" size={size} color={color} />\n            <Countdown\n                className=\"text-xxs\"\n                value={value}\n                format=\"DD:HH:mm:ss\"\n                valueStyle={{\n                    fontSize: size,\n                    color,\n                    lineHeight: 0,\n                }}\n                onFinish={onFinish}\n            />\n        </div>\n    )\n}\nexport default StakingCountDown\n","import * as Yup from 'yup'\nimport validator from 'validator'\n\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\n\nconst FILE_SIZE = 100 * 1024\n\nexport const regex = {\n    alpha: /^[A-Za-z]+$/,\n    alphaNumeric: /[a-zA-Z0-9]/,\n    atLeastOneUpperCase: /[A-Z]/,\n    phoneNumber:\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\n    exact5: /^[0-9]{5}$/,\n}\n\nexport const validations = {\n    password: Yup.string()\n        .min(8, 'Too Short!')\n        .max(64, 'Too Long!')\n        .matches(\n            regex.atLeastOneUpperCase,\n            'Must contain al least one uppercase letter.'\n        )\n        .required('Required'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Required'),\n    userName: Yup.string()\n        .min(3, 'Too Short!')\n        .max(64, 'Too Long!')\n        .test(\n            'alphaNumeric',\n            'Must contain only letters and numbers.',\n            (value) => value && validator.isAlphanumeric(value)\n        )\n        .required('Required'),\n    mail: Yup.string()\n        .max(64, 'Too Long!')\n        .email('Must be a valid email format. example@email.com')\n        .lowercase('Must contain only lower case')\n        .required('Required'),\n    phone: Yup.string()\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\n        .required('Required'),\n    name: Yup.string()\n        .min(3, 'Too Short!')\n        .max(30, 'Too Long!')\n        .test(\n            'alpha',\n            'Must contain only letters.',\n            (value) =>\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\n        ),\n    // .required('Required'),\n    birthDate: Yup.date().required('Required'),\n    country: Yup.string().required('Required'),\n    state: Yup.string().required('Required'),\n    city: Yup.string().required('Required'),\n    line: Yup.string().required('Required'),\n    postalCode: Yup.string()\n        .matches(regex.exact5, 'Must be exactly 5 digits')\n        .required('Required'),\n    file: Yup.mixed()\n        .required('A file is required')\n        .test(\n            'fileSize',\n            'File too large',\n            (value) => value && value[0].size <= FILE_SIZE\n        )\n        .test(\n            'fileFormat',\n            'Unsupported Format',\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\n        )\n        .required('Required'),\n    min20Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\n            if (value) {\n                let _v = value\n                _v = _v.replace(/\\D/g, '')\n                _v = parseFloat(_v)\n                return _v >= 20.0\n            }\n            return false\n        }),\n    no0Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\n            if (value) {\n                let _v = value\n                _v = parseFloat(_v)\n                return _v > 0.0\n            }\n            return false\n        }),\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\n    onlyNumber: Yup.mixed()\n        .required('Required')\n        .test('onlyNumber', 'Field must be a number', (value) => {\n            if (value) {\n                const _v = value\n                const isnum = /^\\d+$/.test(_v)\n\n                return isnum\n            }\n            return false\n        }),\n    isColor: Yup.mixed()\n        .required('Required')\n        .test(\n            'color',\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\n            (value) => {\n                if (value) {\n                    const s = new Option().style\n                    s.color = value\n                    return s.color !== ''\n                }\n                return false\n            }\n        ),\n    number: Yup.number().required('Required'),\n    array: Yup.array().required('Required'),\n    staking: (totalTokens) => {\n        return Yup.mixed()\n            .required('Required')\n            .test('onlyNumber', 'Field must be a number', (value) => {\n                if (value) {\n                    const _v = value\n                    const isnum = /^\\d+$/.test(_v)\n\n                    return isnum\n                }\n                return false\n            })\n            .test('minStake', 'Minimum to stake is 1', (value) => {\n                if (value) {\n                    let _v = value\n                    _v = _v.replace(/\\D/g, '')\n                    _v = parseFloat(_v)\n                    return _v >= 1.0\n                }\n                return false\n            })\n            .test('maxStake', 'Insufficient Balance', (value) => {\n                if (value) {\n                    let _v = value\n                    _v = _v.replace(/\\D/g, '')\n                    _v = parseFloat(_v)\n                    return _v <= parseFloat(totalTokens)\n                }\n                return false\n            })\n    },\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\n        return Yup.mixed()\n            .required('Required')\n            .test('validUserName', 'You can not add yourself', (value) => {\n                if (value) {\n                    if (\n                        value === currentUser.userName ||\n                        value === currentUser.userMail\n                    )\n                        return false\n                    return true\n                }\n                return false\n            })\n            .test(\n                'validateIsNotExistingMember',\n                'You can not add existing members',\n                (value) => {\n                    if (value) {\n                        let valid = true\n\n                        for (\n                            let index = 0;\n                            index < currentMembers.length;\n                            index++\n                        ) {\n                            const { userName, userMail } = currentMembers[index]\n                            if (value === userName || value === userMail) {\n                                valid = false\n                                break\n                            }\n                        }\n                        return valid\n                    }\n                    return false\n                }\n            )\n    },\n}\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\n\nconst FormItem = Form.Item\nconst { Option } = Select\n\nconst CreateAntField =\n    (AntComponent) =>\n    ({\n        field,\n        form,\n        hasFeedback,\n        label,\n        selectOptions,\n        submitCount,\n        type,\n        ...props\n    }) => {\n        const touched = form.touched[field.name]\n        const submitted = submitCount > 0\n        const hasError = form.errors[field.name]\n        const submittedError = hasError && submitted\n        const touchedError = hasError && touched\n        const onInputChange = ({ target: { value } }) =>\n            form.setFieldValue(field.name, value)\n        const onChange = (value) => form.setFieldValue(field.name, value)\n        const onBlur = () => form.setFieldTouched(field.name, true)\n        return (\n            <FormItem\n                label={label}\n                hasFeedback={\n                    (hasFeedback && submitted) || (hasFeedback && touched)\n                }\n                help={submittedError || touchedError ? hasError : false}\n                validateStatus={\n                    submittedError || touchedError ? 'error' : 'success'\n                }\n            >\n                <AntComponent\n                    {...field}\n                    {...props}\n                    onBlur={onBlur}\n                    onChange={type ? onInputChange : onChange}\n                >\n                    {selectOptions &&\n                        selectOptions.map((name) => (\n                            <Option key={name}>{name}</Option>\n                        ))}\n                </AntComponent>\n            </FormItem>\n        )\n    }\n\nexport const AntSelect = CreateAntField(Select)\nexport const AntDatePicker = CreateAntField(DatePicker)\nexport const AntInput = CreateAntField(Input)\nexport const AntInputPassword = CreateAntField(Input.Password)\nexport const AntTimePicker = CreateAntField(TimePicker)\n","import React from 'react'\nimport { Spin } from 'antd'\nimport { LoadingOutlined } from '@ant-design/icons'\n\nconst antIcon = (\n    <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\n)\n\nconst ButtonSpin = ({\n    loading,\n    disabled,\n    textLoading,\n    children,\n    ...restProps\n}) => {\n    return (\n        <button\n            className=\" bg-primary text-lg px-12 py-2 rounded-md text-white disabled:opacity-50\"\n            disabled={disabled}\n            {...restProps}\n        >\n            {loading ? (\n                <span>\n                    <span className=\"pr-2\">\n                        <Spin indicator={antIcon} />\n                    </span>\n                    {textLoading}\n                </span>\n            ) : (\n                <React.Fragment> {children}</React.Fragment>\n            )}\n        </button>\n    )\n}\n\nexport default ButtonSpin\n","import React from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport * as Yup from 'yup'\nimport { Modal } from 'antd'\n// import InputStaking from '../Inputs/InputStaking'\nimport useResponsive from '../../hooks/useResponsive'\nimport useCurrency from '../../hooks/useCurrency'\nimport { validations } from './../../services/yupValidations'\nimport { AntInput } from './../CreateAntField/index'\nimport ButtonSpin from '../Buttons/ButtonSpin'\n\nconst initialValues = {\n    stakingAmount: '',\n}\n\nconst ModalStaking = ({\n    index,\n    title,\n    visibleModal,\n    onCloseModal,\n    deposit,\n    userTokens,\n    loadingStaking,\n}) => {\n    // const [amount, setAmount] = useState(0)\n    const [widthModal] = useResponsive({\n        base: '100%',\n        md: '70%',\n        lg: '50%',\n        xl: '30%',\n    })\n    console.log({ userTokens })\n    userTokens = userTokens / 1e18\n    const tokens = userTokens.toFixed(0)\n\n    const schema = Yup.object({\n        stakingAmount: validations.staking(tokens),\n    })\n\n    const getDdot = () => {\n        console.log('get ddot')\n    }\n\n    const handleOnCloseModal = (resetForm) => {\n        // setAmount(0)\n        resetForm()\n        onCloseModal()\n    }\n\n    const handleSubmit = (values, { resetForm }) => {\n        // console.log(Number(values.stakingAmount))\n        deposit(Number(values.stakingAmount), index)\n        // handleOnCloseModal(resetForm)\n    }\n    return (\n        <Modal\n            title={title}\n            visible={visibleModal}\n            onCancel={onCloseModal}\n            width={widthModal}\n            deposit={deposit}\n            maskClosable={false}\n            footer={null}\n            centered\n        >\n            <Formik\n                // enableReinitialize\n                // validateOnMount={true}\n                validationSchema={schema}\n                initialValues={initialValues}\n                onSubmit={handleSubmit}\n            >\n                {({\n                    isSubmitting,\n                    values,\n                    setFieldValue,\n                    resetForm,\n                    isValid,\n                    isInitialValid,\n                }) => (\n                    <Form>\n                        <div className=\"mb-2\">\n                            <div className=\"flex justify-between items-center\">\n                                <p className=\"font-bold text-base\">Stake</p>\n                                <p className=\"font-bold text-base\">\n                                    Balance:{' '}\n                                    <span className=\"font-normal\">\n                                        {useCurrency(userTokens, 0)}\n                                    </span>\n                                </p>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <div className=\"  flex flex-row items-start\">\n                                    <div className=\"mr-2\">\n                                        <Field\n                                            component={AntInput}\n                                            name=\"stakingAmount\"\n                                            type=\"string\"\n                                            placeholder=\"\"\n                                            // hasFeedback\n                                            value={values?.stakingAmount}\n                                        />\n                                    </div>\n                                    <button\n                                        type=\"button\"\n                                        className=\"disabled:opacity-50 bg-primary rounded-md py-1 px-3 text-white text-base font-bold\"\n                                        onClick={() => {\n                                            setFieldValue(\n                                                'stakingAmount',\n                                                tokens\n                                            )\n                                        }}\n                                    >\n                                        MAX\n                                    </button>\n                                </div>\n                                <p className=\"text-2xl font-bold\">DDOT</p>\n                            </div>\n                        </div>\n                        <div className=\"\">\n                            {/* <div className=\"flex justify-between items-center mb-4\">\n                                <p className=\"text-base\">\n                                    Annual ROI at current rates:\n                                </p>\n                                <p className=\"text-base font-bold\">$0,00</p>\n                            </div> */}\n                            <div className=\"flex justify-around items-center mb-5\">\n                                <button\n                                    type=\"button\"\n                                    className=\"disabled:opacity-50 bg-transparent border-solid border border-primary rounded-md py-1 px-10 text-primary text-lg font-bold\"\n                                    disabled={loadingStaking}\n                                    onClick={() =>\n                                        handleOnCloseModal(resetForm)\n                                    }\n                                >\n                                    Cancel\n                                </button>\n                                <ButtonSpin\n                                    type=\"submit\"\n                                    className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 px-10 text-white text-lg font-bold\"\n                                    disabled={!isValid || loadingStaking}\n                                    loading={loadingStaking}\n                                >\n                                    Confirm\n                                </ButtonSpin>\n                            </div>\n                            <div className=\"text-center\">\n                                <p\n                                    onClick={() => getDdot()}\n                                    className=\"font-bold text-xl text-primary cursor-pointer\"\n                                >\n                                    Get DDOT\n                                </p>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </Modal>\n    )\n}\n\nexport default ModalStaking\n","import { useState } from 'react'\nimport { ConfigProvider, Table } from 'antd'\nimport { InboxOutlined } from '@ant-design/icons'\nimport useCurrency from '../../hooks/useCurrency'\nimport StakingCountDown from '../CountDowns/StakingCountDown'\nimport useInterval from './../../hooks/useInterval'\nimport useEffectOnce from './../../hooks/useEffectOnce'\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\nimport ButtonSpin from '../Buttons/ButtonSpin'\nimport useResponsive from './../../hooks/useResponsive'\nimport { cls } from './../../services/helpers'\n\nconst columns = [\n    {\n        title: 'Deposit date',\n        dataIndex: 'deposit_date',\n        key: 'deposit_date',\n        ellipsis: true,\n    },\n    {\n        title: 'Deposit amount',\n        dataIndex: 'deposit_amount',\n        key: 'deposit_amount',\n        ellipsis: true,\n    },\n    {\n        title: 'Reward',\n        dataIndex: 'reward',\n        key: 'reward',\n        ellipsis: true,\n    },\n    {\n        title: 'Lock duration',\n        dataIndex: 'lock_duration',\n        key: 'lock_duration',\n        ellipsis: true,\n    },\n    {\n        title: '',\n        dataIndex: 'unStake',\n        key: 'unStake',\n        ellipsis: true,\n    },\n]\n\nconst customizeRenderEmpty = () => (\n    <div className=\"text-center\">\n        <InboxOutlined style={{ fontSize: 40 }} />\n        <p>No Data</p>\n    </div>\n)\n\nconst UnStake = ({ item, lockDuration }) => {\n    const { getReward } = useSCInteractions()\n    const [loading, setLoading] = useState(false)\n    const [enableUnstake, setEnableUnstake] = useState(false)\n\n    const lockDurationEnd = () => {\n        const today = new Date()\n        const ends = new Date(lockDuration)\n        setEnableUnstake(today.getTime() > ends.getTime())\n    }\n\n    useEffectOnce(() => {\n        lockDurationEnd()\n    })\n\n    useInterval(\n        () => {\n            lockDurationEnd()\n        },\n        !enableUnstake ? 500 : null\n    )\n\n    const handleUnstake = () => {\n        setLoading(true)\n        getReward(item, (res) => {\n            if (res?.err) {\n                console.log(res)\n            }\n            setLoading(false)\n        })\n    }\n\n    return (\n        <div className=\"flex w-full\">\n            <ButtonSpin\n                onClick={handleUnstake}\n                className=\"disabled:opacity-50 bg-primary border-solid border border-primary rounded-md py-1 w-full md:w-8/12 text-white text-lg font-bold mx-auto\"\n                disabled={!enableUnstake || loading}\n                loading={loading}\n            >\n                Unstake\n            </ButtonSpin>\n        </div>\n    )\n}\n\nconst TableStaking = ({\n    stake,\n    lokedTime,\n    isStakeholder,\n    userStakes,\n    getReward,\n    isDarkMode,\n}) => {\n    const [widthCell] = useResponsive({ base: 150, md: '100%' })\n\n    const data = userStakes.reduce((acc, item, i) => {\n        if (Number(item.type) === stake && item.reward != null) {\n            const date = new Date(item.stakeTime * 1000).toLocaleString('en-GB')\n            console.log({ date })\n            const depositAmount = item.tokensLocked / 1e18\n            const reward = (item.reward - item.tokensLocked) / 1e18\n            let lockDuration = Number(item.stakeTime) + Number(lokedTime)\n            lockDuration = lockDuration * 1000\n\n            return [\n                ...acc,\n                {\n                    key: i,\n                    deposit_date: date,\n                    deposit_amount: useCurrency(depositAmount, 0),\n                    reward: useCurrency(reward, 2),\n                    lock_duration: (\n                        <StakingCountDown\n                            value={lockDuration}\n                            size=\"1rem\"\n                            color=\"white\"\n                        />\n                    ),\n                    width: 100,\n                    unStake: (\n                        <UnStake\n                            item={i}\n                            getReward={getReward}\n                            lockDuration={lockDuration}\n                        />\n                    ),\n                },\n            ]\n        }\n        return acc\n    }, [])\n\n    return (\n        <div className=\"table-info overflow-y-auto \">\n            {isStakeholder && (\n                <ConfigProvider renderEmpty={customizeRenderEmpty}>\n                    <Table\n                        pagination={false}\n                        columns={columns.reduce(\n                            (acc, v) => [...acc, { ...v, width: widthCell }],\n                            []\n                        )}\n                        dataSource={data}\n                        className={cls(\n                            `${isDarkMode && 'ant-table-wrapper-dark'}`\n                        )}\n                        bordered\n                        scroll={{ x: '100%' }}\n                    />\n                </ConfigProvider>\n            )}\n        </div>\n    )\n}\nexport default TableStaking\n","import { useEffect } from 'react'\n\nexport default function useEffectOnce(cb) {\n    useEffect(cb, [])\n}\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react'\nimport { Collapse } from 'antd'\nimport useAmountTo1E18 from '../../hooks/useAmountTo1E18'\nimport StakingCountDown from '../CountDowns/StakingCountDown'\nimport ModalStaking from '../Modals/ModalStaking'\nimport TableStaking from '../Tables/TableStaking'\nimport useCurrency from '../../hooks/useCurrency'\nimport { RightOutlined } from '@ant-design/icons'\nimport { ImagotipoSVG } from '../../assets/svg/home'\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\nimport useSCData from './../../hooks/scInteractions/useSCData'\nimport useWindowSize from './../../hooks/useWindowSize'\nimport useResponsive from './../../hooks/useResponsive'\nimport useListenCookie from '../../hooks/useListenCookie'\nconst { Panel } = Collapse\n\nconst HeaderPanel = ({ info: { APR, lockedTime, totalDeposit, active } }) => {\n    totalDeposit = totalDeposit / 1e18\n    const duration = lockedTime * (1 / 86400)\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\n    return (\n        <div className=\"w-full flex flex-row justify-between items-center py-2\">\n            <div className=\" flex flex-row text-gray-13 dark:text-white items-center leading-none\">\n                <ImagotipoSVG className=\"w-9 mr-2 \" />\n                <span className=\"font-bold text-sm md:text-lg \">DDOT</span>\n            </div>\n            <div className=\" text-gray-13 dark:text-white  text-center flex flex-row items-center leading-none\">\n                <div className=\"font-light text-sm md:text-sm mr-1\">APR:</div>\n                <div className=\"font-bold text-xxs md:text-base\">{APR}%</div>\n            </div>\n            <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\n                <div className=\"font-light text-xs md:text-sm mr-1\">\n                    Total deposit:\n                </div>\n                <div className=\"font-bold text-xxs md:text-base\">\n                    {useCurrency(totalDeposit, 0)}\n                </div>\n            </div>\n            {/* <div className=\"text-gray-13 dark:text-white\">\n                <p className=\"font-light text-lg\">Max cap</p>\n                <p className=\"font-bold text-base\">{}</p>\n            </div> */}\n            <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\n                <div className=\"font-light text-xs md:text-sm mr-1 \">\n                    Duration:\n                </div>\n                <div className=\"font-bold text-xxs md:text-base \">\n                    {Math.ceil(duration)} days\n                </div>\n            </div>\n            <div className=\" flex flex-row justify-center items-center leading-none\">\n                <div className=\"font-light text-sm md:text-sm text-gray-13 dark:text-white text-center mr-1\">\n                    Contract end time:\n                </div>\n                {active ? (\n                    <StakingCountDown value={deadline} size={'0.875rem'} />\n                ) : (\n                    <div className=\"bg-red-300 text-red-0 text-center rounded-md px-3 py-1  mx-auto font-medium text-xs md:text-sm \">\n                        Inactive\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nconst HeaderPanelMobile = ({\n    info: { APR, lockedTime, totalDeposit, active },\n}) => {\n    totalDeposit = totalDeposit / 1e18\n    const duration = lockedTime * (1 / 86400)\n    const deadline = Date.now() + 1000 * 60 * 60 * 24 * 2 + 1000 * 30\n    return (\n        <div className=\"w-full py-2\">\n            <div className=\"flex flex-row justify-between\">\n                <div className=\" flex flex-row text-gray-13 dark:text-white items-center leading-none\">\n                    <ImagotipoSVG className=\"w-9 mr-2 \" />\n                    <span className=\"font-bold text-sm \">DDOT</span>\n                </div>{' '}\n                <div className=\" flex flex-row justify-center items-center leading-none\">\n                    <div className=\"font-light text-xs text-gray-13 dark:text-white text-center mr-1\">\n                        Contract end time:\n                    </div>\n                    <div className=\"font-medium text-xs flex\">\n                        {active ? (\n                            <StakingCountDown\n                                value={deadline}\n                                size=\"1rem\"\n                                color=\"white\"\n                            />\n                        ) : (\n                            <div className=\"bg-red-1 text-red-0 text-center font-medium rounded-md px-3 py-2  mx-auto\">\n                                Inactive\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n            <div className=\" flex flex-row justify-between mt-4\">\n                <div className=\" text-gray-13 dark:text-white  text-center flex flex-row items-center leading-none\">\n                    <div className=\"font-light text-xs  mr-1\">APR:</div>\n                    <div className=\"font-bold text-sm \">{APR}%</div>\n                </div>\n                <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\n                    <div className=\"font-light text-xs  mr-1\">\n                        Total deposit:\n                    </div>\n                    <div className=\"font-bold text-sm\">\n                        {useCurrency(totalDeposit, 0)}\n                    </div>\n                </div>\n                <div className=\" text-gray-13 dark:text-white text-center flex flex-row items-center leading-none\">\n                    <div className=\"font-light text-xs mr-1\">Duration:</div>\n                    <div className=\"font-bold text-sm\">{duration} days</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst CollapseStaking = () => {\n    const [loadingStaking, setLoading] = useState(false)\n    const [visibleModal, setVisibleModal] = useState(false)\n    const [indexModal, setIndexModal] = useState(0)\n    const { width } = useWindowSize()\n    const { data } = useSCData()\n    const { createStake } = useSCInteractions()\n    const [theme] = useListenCookie('theme')\n    const isDarkMode = theme === 'dark'\n\n    const {\n        contractStakes,\n        userStakes,\n        userTokens,\n        isStakeholder,\n        totalUserStakes,\n    } = data\n    const handleShowModal = (index) => {\n        setVisibleModal(!visibleModal)\n        setIndexModal(index)\n    }\n    const deposit = (amount, stake) => {\n        setLoading(true)\n        const amountToStake = useAmountTo1E18(amount)\n        createStake(amountToStake, stake, (res) => {\n            if (res?.err) {\n                console.log(res)\n            }\n            setLoading(false)\n            setVisibleModal(!visibleModal)\n        })\n    }\n\n    if (!contractStakes) return null\n    return (\n        <React.Fragment>\n            <ModalStaking\n                loadingStaking={loadingStaking}\n                index={indexModal}\n                title={'Stake tokens'}\n                visibleModal={visibleModal}\n                onCloseModal={handleShowModal}\n                deposit={deposit}\n                userTokens={userTokens}\n            />\n            {contractStakes.map((item, index) => {\n                return (\n                    <Collapse\n                        bordered={false}\n                        // collapsible=\"header\"\n                        expandIcon={({ isActive }) => (\n                            <RightOutlined\n                                className=\"text-gray-13 dark:text-white\"\n                                rotate={isActive ? 90 : 0}\n                            />\n                        )}\n                        expandIconPosition=\"right\"\n                        key={index}\n                        className=\"mb-3 rounded-xl dark:bg-gray-4\"\n                    >\n                        <Panel\n                            header={\n                                width > 425 ? (\n                                    <HeaderPanel info={item} />\n                                ) : (\n                                    <HeaderPanelMobile info={item} />\n                                )\n                            }\n                            key={index}\n                        >\n                            <div className=\"text-gray-13 dark:text-white border-t dark:border-gray-1 pt-4\">\n                                <div className=\"button-section text-right mb-4\">\n                                    {totalUserStakes >= 5 ? (\n                                        <div\n                                            className=\"alert alert-info\"\n                                            role=\"alert\"\n                                        >\n                                            You only can have 5 stakes\n                                        </div>\n                                    ) : (\n                                        <>\n                                            {userTokens > 0 ? (\n                                                <button\n                                                    onClick={() =>\n                                                        handleShowModal(index)\n                                                    }\n                                                    className=\"disabled:opacity-50 bg-primary text-white font-semibold border-none text-base px-6 py-2 rounded-md\"\n                                                    disabled={!item.active}\n                                                >\n                                                    Deposit\n                                                </button>\n                                            ) : (\n                                                <p>\n                                                    You need tokens to continue\n                                                </p>\n                                            )}\n                                        </>\n                                    )}\n                                </div>\n                                <TableStaking\n                                    stake={index}\n                                    lokedTime={item.lockedTime}\n                                    isStakeholder={isStakeholder}\n                                    userStakes={userStakes}\n                                    isDarkMode={isDarkMode}\n                                />\n                            </div>\n                        </Panel>\n                    </Collapse>\n                )\n            })}\n        </React.Fragment>\n    )\n}\n\nexport default CollapseStaking\n","export default function useAmountTo1E18(x) {\n    let amount = 0\n    if (x < 1000) {\n        amount = x * 1e18\n    } else {\n        x = x * 1e18\n        let e = parseInt(x.toString().split('+')[1])\n        e -= 20\n        x /= Math.pow(10, e)\n        x += new Array(e + 1).join('0')\n        amount = x\n    }\n    return amount.toString()\n}\n","import React from 'react'\n// import { Row, Col } from 'antd'\nimport CollapseStaking from '../components/Collapse/CollapseStaking'\nimport ReloadDataButton from '../components/ReloadButton/ReloadDataButton'\n\nconst StakingView = (props) => {\n    return (\n        <div className=\"mx-5\">\n            <div className=\"max-w-1650px mx-auto\">\n                <div className=\"pb-8\">\n                    <div className=\"mb-6 mt-4 flex justify-end\">\n                        <ReloadDataButton />\n                    </div>\n\n                    <CollapseStaking />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default StakingView\n","export const cls = (input) => {\n    return input\n        .replace(/\\s+/gm, ' ')\n        .split(' ')\n        .filter((cond) => typeof cond === 'string' && cond !== 'undefined')\n        .join(' ')\n        .trim()\n}\n\nexport const escapeRegExp = (string) => {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n","import { useState } from 'react'\nimport useWindowSize from './useWindowSize'\nimport useDeepCompareEffect from './useDeepCompareEffect'\n\nconst temp = (values) => {\n    for (let index = 0; index < values.length; index++) {\n        if (typeof values[index] !== 'undefined') {\n            return values[index]\n        }\n    }\n}\n\nconst useResponsive = ({ xxl, xl, lg, md, sm, base }) => {\n    const [value, setValue] = useState(() => temp([xxl, xl, lg, md, sm, base]))\n\n    const { width } = useWindowSize()\n    useDeepCompareEffect(() => {\n        if (width >= 1536) {\n            setValue(temp([xxl, xl, lg, md, sm, base]))\n        } else if (width >= 1280) {\n            setValue(temp([xl, lg, md, sm, base]))\n        } else if (width >= 1024) {\n            setValue(temp([lg, md, sm, base]))\n        } else if (width >= 768) {\n            setValue(temp([md, sm, base]))\n        } else if (width >= 640) {\n            setValue(temp([sm, base]))\n        } else {\n            setValue(base)\n        }\n    }, [width])\n    return [value]\n}\n\nexport default useResponsive\n","import React from 'react'\n// import { Spin } from 'antd'\n// import { LoadingOutlined } from '@ant-design/icons'\n\nimport useSCInteractions from '../../hooks/scInteractions/useSCInteractions'\nimport useSCData from './../../hooks/scInteractions/useSCData'\n// import ButtonSpinner from '../Buttons/ButtonSpinner'\nimport IconRefresh from './../../assets/svg/icons/IconRefresh'\nimport { cls } from './../../services/helpers'\n\n// const antIcon = (\n//     <LoadingOutlined className=\" text-white\" style={{ fontSize: 24 }} spin />\n// )\n\nconst ReloadDataButton = () => {\n    const { reloadData } = useSCInteractions()\n    const { fetching: fetchingData } = useSCData()\n    return (\n        <button\n            disabled={fetchingData}\n            className=\"flex items-start justify-center\"\n            onClick={() => {\n                reloadData(true)\n            }}\n        >\n            <div className=\"h-8 w-8 lg:h-9 lg:w-9\">\n                <IconRefresh\n                    className={cls(`${fetchingData && 'animate-spin'}`)}\n                    size={'100%'}\n                />\n            </div>\n        </button>\n    )\n}\n\nexport default ReloadDataButton\n"],"sourceRoot":""}