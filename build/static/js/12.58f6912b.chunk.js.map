{"version":3,"sources":["views/AuthView/Forms/SignUp.js","services/yupValidations.js","components/CreateAntField/index.js"],"names":["schema","Yup","firstName","validations","name","lastName","email","mail","userName","password","confirmPassword","passwordConfirmation","initialValues","SigUp","onSubmit","showError","errorMessage","history","useHistory","Fragment","className","validationSchema","values","isSubmitting","component","AntInput","type","placeholder","hasFeedback","value","AntInputPassword","iconRender","visible","message","showIcon","Item","block","htmlType","loading","style","paddingTop","paddingBottom","top","href","onClick","e","preventDefault","push","LoginInPath","SUPPORTED_FORMATS","regex","min","max","matches","required","oneOf","test","validator","isAlphanumeric","lowercase","phone","isAlpha","replace","birthDate","country","state","city","line","postalCode","file","size","includes","min20Usd","_v","parseFloat","no0Usd","generic","boolean","onlyNumber","isColor","s","Option","color","number","array","validateIsNotCurrentUser","currentUser","currentMembers","userMail","valid","index","length","FormItem","Form","Select","CreateAntField","AntComponent","field","form","label","selectOptions","submitCount","props","touched","submitted","hasError","errors","submittedError","touchedError","help","validateStatus","onBlur","setFieldTouched","onChange","target","setFieldValue","map","DatePicker","Input","Password","TimePicker"],"mappings":"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","file":"static/js/12.58f6912b.chunk.js","sourcesContent":["import React from 'react'\nimport { Formik, Form, Field } from 'formik'\nimport { Button, Form as FormAnt, Alert } from 'antd'\nimport * as Yup from 'yup'\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons'\nimport { validations } from '../../../services/yupValidations'\nimport { useHistory } from 'react-router'\n\nimport { LoginInPath } from '../../../constants/routerConstants'\nimport {\n    AntInput,\n    AntInputPassword,\n} from '../../../components/CreateAntField/index'\n\nconst schema = Yup.object({\n    firstName: validations.name,\n    lastName: validations.name,\n    email: validations.mail,\n    userName: validations.userName,\n    password: validations.password,\n    confirmPassword: validations.passwordConfirmation,\n})\n\nconst initialValues = {\n    firstName: '',\n    lastName: '',\n    userName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n}\n\nconst SigUp = ({ onSubmit, showError, errorMessage }) => {\n    const history = useHistory()\n\n    return (\n        <React.Fragment>\n            <div className=\"font-medium mb-2\">Sign up</div>\n            <Formik\n                validationSchema={schema}\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n            >\n                {({ values, isSubmitting }) => (\n                    <Form className=\"mb-4\">\n                        <div className=\"flex flex-row space-x-2\">\n                            <Field\n                                component={AntInput}\n                                type=\"text\"\n                                name=\"firstName\"\n                                placeholder=\"* First Name\"\n                                className=\"h-12 rounded-lg\"\n                                hasFeedback\n                                value={values?.firstName}\n                            />\n                            <Field\n                                component={AntInput}\n                                type=\"text\"\n                                name=\"lastName\"\n                                placeholder=\"* Last Name\"\n                                className=\"h-12 rounded-lg\"\n                                hasFeedback\n                                value={values?.lastName}\n                            />\n                        </div>\n                        <Field\n                            component={AntInput}\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder=\"Email\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.email}\n                        />\n                        <Field\n                            component={AntInput}\n                            type=\"text\"\n                            name=\"userName\"\n                            placeholder=\"Username\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            value={values?.userName}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.password}\n                        />\n                        <Field\n                            component={AntInputPassword}\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            placeholder=\"Confirm Password\"\n                            className=\"h-12 rounded-lg\"\n                            hasFeedback\n                            iconRender={(visible) =>\n                                visible ? (\n                                    <EyeTwoTone />\n                                ) : (\n                                    <EyeInvisibleOutlined />\n                                )\n                            }\n                            value={values?.confirmPassword}\n                        />\n                        {showError && (\n                            <Alert\n                                className=\"mb-5\"\n                                message={errorMessage}\n                                type=\"error\"\n                                showIcon\n                            />\n                        )}\n\n                        <FormAnt.Item className=\"mb-0\">\n                            <Button\n                                type=\"primary\"\n                                block\n                                className=\"text-sm px-4 py-2 py h-12 rounded-full font-medium\"\n                                htmlType=\"submit\"\n                                loading={isSubmitting}\n                                style={{\n                                    paddingTop: '9px',\n                                    paddingBottom: '9px',\n                                }}\n                            >\n                                Register\n                            </Button>\n                        </FormAnt.Item>\n                    </Form>\n                )}\n            </Formik>\n\n            <div className=\"login-links text-center\">\n                <span\n                    className=\"text-gray-9 text-sm h-auto py-0 relative\"\n                    style={{ top: '-7px' }}\n                >\n                    Already have an account.\n                    <a\n                        className=\"font-medium text-blue-200 hover:text-info\"\n                        href=\"#\"\n                        onClick={(e) => {\n                            e.preventDefault()\n\n                            history.push(LoginInPath)\n                        }}\n                    >\n                        {' '}\n                        Log in\n                    </a>\n                </span>\n            </div>\n            {!showError && <div className=\"h-40px mb-5\"></div>}\n        </React.Fragment>\n    )\n}\n\nSigUp.propTypes = {}\n\nexport default SigUp\n","import * as Yup from 'yup'\nimport validator from 'validator'\n\nexport const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\n\nconst FILE_SIZE = 100 * 1024\n\nexport const regex = {\n    alpha: /^[A-Za-z]+$/,\n    alphaNumeric: /[a-zA-Z0-9]/,\n    atLeastOneUpperCase: /[A-Z]/,\n    phoneNumber:\n        /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/,\n    exact5: /^[0-9]{5}$/,\n}\n\nexport const validations = {\n    password: Yup.string()\n        .min(8, 'Too Short!')\n        .max(64, 'Too Long!')\n        .matches(\n            regex.atLeastOneUpperCase,\n            'Must contain al least one uppercase letter.'\n        )\n        .required('Required'),\n    passwordConfirmation: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Required'),\n    userName: Yup.string()\n        .min(3, 'Too Short!')\n        .max(64, 'Too Long!')\n        .test(\n            'alphaNumeric',\n            'Must contain only letters and numbers.',\n            (value) => value && validator.isAlphanumeric(value)\n        )\n        .required('Required'),\n    mail: Yup.string()\n        .max(64, 'Too Long!')\n        .email('Must be a valid email format. example@email.com')\n        .lowercase('Must contain only lower case')\n        .required('Required'),\n    phone: Yup.string()\n        .matches(regex.phoneNumber, 'Must be a valid phone number.')\n        .required('Required'),\n    name: Yup.string()\n        .min(3, 'Too Short!')\n        .max(30, 'Too Long!')\n        .test(\n            'alpha',\n            'Must contain only letters.',\n            (value) =>\n                !value || (value && validator.isAlpha(value.replace(' ', '')))\n        ),\n    // .required('Required'),\n    birthDate: Yup.date().required('Required'),\n    country: Yup.string().required('Required'),\n    state: Yup.string().required('Required'),\n    city: Yup.string().required('Required'),\n    line: Yup.string().required('Required'),\n    postalCode: Yup.string()\n        .matches(regex.exact5, 'Must be exactly 5 digits')\n        .required('Required'),\n    file: Yup.mixed()\n        .required('A file is required')\n        .test(\n            'fileSize',\n            'File too large',\n            (value) => value && value[0].size <= FILE_SIZE\n        )\n        .test(\n            'fileFormat',\n            'Unsupported Format',\n            (value) => value && SUPPORTED_FORMATS.includes(value[0].type)\n        )\n        .required('Required'),\n    min20Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Minimum to invest is 20 USD', (value) => {\n            if (value) {\n                let _v = value\n                _v = _v.replace(/\\D/g, '')\n                _v = parseFloat(_v)\n                return _v >= 20.0\n            }\n            return false\n        }),\n    no0Usd: Yup.mixed()\n        .required('Required')\n        .test('usdAmount', 'Usd amount must be higher than 0', (value) => {\n            if (value) {\n                let _v = value\n                _v = parseFloat(_v)\n                return _v > 0.0\n            }\n            return false\n        }),\n    generic: Yup.string().max(64, 'Too Long!').required('Required'),\n    boolean: Yup.bool().oneOf([true], 'Field must be checked'),\n    onlyNumber: Yup.mixed()\n        .required('Required')\n        .test('onlyNumber', 'Field must be a number', (value) => {\n            if (value) {\n                const _v = value\n                const isnum = /^\\d+$/.test(_v)\n\n                return isnum\n            }\n            return false\n        }),\n    isColor: Yup.mixed()\n        .required('Required')\n        .test(\n            'color',\n            'Field must be a valid color format. Examples. RGBA: rgba(0, 0, 0, 1), HEXA: #000000, RGB: rgb(0,0,0), Color: red',\n            (value) => {\n                if (value) {\n                    const s = new Option().style\n                    s.color = value\n                    return s.color !== ''\n                }\n                return false\n            }\n        ),\n    number: Yup.number().required('Required'),\n    array: Yup.array().required('Required'),\n    validateIsNotCurrentUser: (currentUser, currentMembers) => {\n        return Yup.mixed()\n            .required('Required')\n            .test('validUserName', 'You can not add yourself', (value) => {\n                if (value) {\n                    if (\n                        value === currentUser.userName ||\n                        value === currentUser.userMail\n                    )\n                        return false\n                    return true\n                }\n                return false\n            })\n            .test(\n                'validateIsNotExistingMember',\n                'You can not add existing members',\n                (value) => {\n                    if (value) {\n                        let valid = true\n\n                        for (\n                            let index = 0;\n                            index < currentMembers.length;\n                            index++\n                        ) {\n                            const { userName, userMail } = currentMembers[index]\n                            if (value === userName || value === userMail) {\n                                valid = false\n                                break\n                            }\n                        }\n                        return valid\n                    }\n                    return false\n                }\n            )\n    },\n}\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport { DatePicker, Form, Input, TimePicker, Select } from 'antd'\n\nconst FormItem = Form.Item\nconst { Option } = Select\n\nconst CreateAntField =\n    (AntComponent) =>\n    ({\n        field,\n        form,\n        hasFeedback,\n        label,\n        selectOptions,\n        submitCount,\n        type,\n        ...props\n    }) => {\n        const touched = form.touched[field.name]\n        const submitted = submitCount > 0\n        const hasError = form.errors[field.name]\n        const submittedError = hasError && submitted\n        const touchedError = hasError && touched\n        const onInputChange = ({ target: { value } }) =>\n            form.setFieldValue(field.name, value)\n        const onChange = (value) => form.setFieldValue(field.name, value)\n        const onBlur = () => form.setFieldTouched(field.name, true)\n        return (\n            <FormItem\n                label={label}\n                hasFeedback={\n                    (hasFeedback && submitted) || (hasFeedback && touched)\n                }\n                help={submittedError || touchedError ? hasError : false}\n                validateStatus={\n                    submittedError || touchedError ? 'error' : 'success'\n                }\n            >\n                <AntComponent\n                    {...field}\n                    {...props}\n                    onBlur={onBlur}\n                    onChange={type ? onInputChange : onChange}\n                >\n                    {selectOptions &&\n                        selectOptions.map((name) => (\n                            <Option key={name}>{name}</Option>\n                        ))}\n                </AntComponent>\n            </FormItem>\n        )\n    }\n\nexport const AntSelect = CreateAntField(Select)\nexport const AntDatePicker = CreateAntField(DatePicker)\nexport const AntInput = CreateAntField(Input)\nexport const AntInputPassword = CreateAntField(Input.Password)\nexport const AntTimePicker = CreateAntField(TimePicker)\n"],"sourceRoot":""}