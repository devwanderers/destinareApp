{"version":3,"sources":["views/PrivateSaleView.js"],"names":["initialState","verified","visible","selectedPlan","paying","PrivateSaleView","history","useHistory","account","useWeb3React","useState","state","setState","alreadyRequest","useAlreadyRequestWhitelist","whitelist","useWhiteList","fetchWhiteList","useFetchWhiteList","clearWhiteListR","useClearWhiteListReducer","buyPrivateSale","useBuyPrivateSale","updateWhitelist","useUpdateWhitelist","useEffect","planCompromised","package","_selectedPackage","stakingLvlsPrivate","find","s","packageId","packagePrivateSale","useDeepCompareEffect","whiteList","className","style","height","onClose","reset","newState","Fragment","title","subtitle","properties","onClick","privateSale","length","push","InvestPath","err","message","data","a","console","log","from","to","transactionHash","Date","getTime","amount","tokens","paid","loading","map"],"mappings":"gSAyBMA,EAAe,CACjBC,UAAU,EACVC,SAAS,EACTC,aAAc,KACdC,QAAQ,GA4IGC,UAzIS,WACpB,IAAMC,EAAUC,cACRC,EAAYC,cAAZD,QAER,EAA0BE,mBAASV,GAAnC,mBAAOW,EAAP,KAAcC,EAAd,KACQV,EAAkCS,EAAlCT,QAASC,EAAyBQ,EAAzBR,aAAcC,EAAWO,EAAXP,OAIzBS,EAAiBC,cACjBC,EAAYC,cACZC,EAAiBC,cACjBC,EAAkBC,cAElBC,EAAiBC,cACjBC,EAAkBC,cAExBC,qBAAU,WACNb,EAASZ,GACTmB,MACD,CAACX,IAEJ,IAAIkB,EAAkB,KACtB,GAA0B,IAAtBX,EAAUY,QAAe,CACzB,IAAMC,EAAmBC,IAAmBC,MACxC,SAACC,GAAD,OAAOA,EAAEC,YAAcjB,EAAUkB,sBAEjCL,IAAkBF,EAAkBE,GAG5CM,aAAqB,cAAU,CAACnB,IAyChC,OACKP,IACAS,EAAeJ,gBACfI,EAAeJ,gBACZA,IACCI,EAAekB,UAGhB,qBAAKC,UAAU,OAAOC,MAAO,CAAEC,OAAQ,0BAAvC,SACI,cAAC,IAAD,MAMR,sBAAKF,UAAU,OAAOC,MAAO,CAAEC,OAAQ,0BAAvC,UACI,cAAC,IAAD,aACIpC,QAASA,EACTqC,QArDe,WAAmB,IAAlBC,IAAiB,yDACnCC,EAAQ,2BAAQ9B,GAAR,IAAeT,SAAS,IAClCsC,IAAOC,EAAStC,aAAe,MACnCS,EAAS6B,KAmDGtC,IAER,qBAAKiC,UAAU,4BAAf,SACMvB,EAKE,cAAC,IAAM6B,SAAP,UACMhB,EAmBE,qBAAKU,UAAU,sCAAf,SACI,cAAC,IAAD,CACIO,MAAOjB,EAAgBiB,MACvBC,SAAUlB,EAAgBkB,SAC1BC,WAAYnB,EAAgBmB,WAC5BC,QAjFV,WACd/B,EAAUgC,YAAYC,OAAS,EAC/B1C,EAAQ2C,KAAKC,MAEbtC,EAAS,2BAAKD,GAAN,IAAaP,QAAQ,KAC7BiB,EAAeK,EAAD,uCAAkB,WAAOyB,EAAKC,EAASC,GAArB,mBAAAC,EAAA,0DACxBH,EADwB,gBAExBvC,EAAS,2BAAKD,GAAN,IAAaP,QAAQ,KAC7BmD,QAAQC,IAAI,CAAEL,QAHU,6BAKhBM,EAA8BJ,EAA9BI,KAAMC,EAAwBL,EAAxBK,GAAIC,EAAoBN,EAApBM,gBALM,SAOlBpC,EAAgB,CAClBwB,YAAa,EACT,IAAIa,MAAOC,UACXJ,EACAC,EACAC,EACAjC,EAAgBoC,OAChBpC,EAAgBqC,UAdA,OAkBxBzD,EAAQ2C,KAAKC,KAlBW,2CAAlB,6DA6EUc,KAAMjD,EAAUgC,YAAYC,OAAS,EACrCiB,QAAS7D,MAzBjB,qBAAKgC,UAAU,yBAAf,SACKP,IAAmBqC,KAAI,SAACnC,GACrB,IAAQY,EAAgCZ,EAAhCY,MAAOC,EAAyBb,EAAzBa,SAAUC,EAAed,EAAfc,WACzB,OACI,cAAC,IAAD,CAEIF,MAAOA,EACPC,SAAUA,EACVC,WAAYA,EACZC,QAAS,kBA7EpBO,EA8EmCtB,OA7E5DnB,EAAS,2BAAKD,GAAN,IAAaT,SAAS,EAAMC,aAAckD,KAD1B,IAACA,GAgFWpD,SAAUc,EAAUd,UARxB,kBACoB0C,WAXxC,cAAC,IAAD,CAAeP,UAAU,kBAAzB,SACI,cAAC,IAAD,CAAiB5B,QAASA","file":"static/js/20.107b4c58.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport CardContainer from '../components/Cards/CardContainer'\r\nimport FormPrivateSale from '../components/PrivateSale/FormPrivateSale'\r\n\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nimport {\r\n    useAlreadyRequestWhitelist,\r\n    useWhiteList,\r\n    useFetchWhiteList,\r\n    useUpdateWhitelist,\r\n    useClearWhiteListReducer,\r\n} from './../store/reducers/whitelist/hooks'\r\n\r\nimport ModalCompromisePackage from '../components/PrivateSale/ModalCompromisePackage'\r\nimport CardCompromisePlan from '../components/PrivateSale/CardCompromisePlan'\r\nimport CardReservePlan from './../components/PrivateSale/CardReservePlan'\r\nimport useDeepCompareEffect from './../hooks/useDeepCompareEffect'\r\nimport PageLoading from '../components/PageLoadings/PageLoading'\r\nimport { useBuyPrivateSale } from '../hooks/scInteractions/privateSaleHooks'\r\n\r\nimport { useHistory } from 'react-router'\r\nimport { InvestPath } from './../constants/routerConstants'\r\nimport { stakingLvlsPrivate } from './../constants/stakingLevels'\r\n\r\nconst initialState = {\r\n    verified: false,\r\n    visible: false,\r\n    selectedPlan: null,\r\n    paying: false,\r\n}\r\n\r\nconst PrivateSaleView = () => {\r\n    const history = useHistory()\r\n    const { account } = useWeb3React()\r\n\r\n    const [state, setState] = useState(initialState)\r\n    const { visible, selectedPlan, paying } = state\r\n\r\n    // const [planCompromised, setPlanCompromised] = useState(null)\r\n\r\n    const alreadyRequest = useAlreadyRequestWhitelist()\r\n    const whitelist = useWhiteList()\r\n    const fetchWhiteList = useFetchWhiteList()\r\n    const clearWhiteListR = useClearWhiteListReducer()\r\n\r\n    const buyPrivateSale = useBuyPrivateSale()\r\n    const updateWhitelist = useUpdateWhitelist()\r\n\r\n    useEffect(() => {\r\n        setState(initialState)\r\n        clearWhiteListR()\r\n    }, [account])\r\n\r\n    let planCompromised = null\r\n    if (whitelist.package !== 0) {\r\n        const _selectedPackage = stakingLvlsPrivate.find(\r\n            (s) => s.packageId === whitelist.packagePrivateSale\r\n        )\r\n        if (_selectedPackage) planCompromised = _selectedPackage\r\n    }\r\n\r\n    useDeepCompareEffect(() => {}, [whitelist])\r\n\r\n    const handleSelectPackage = (data) => {\r\n        setState({ ...state, visible: true, selectedPlan: data })\r\n    }\r\n\r\n    const handleOnCloseModal = (reset = true) => {\r\n        const newState = { ...state, visible: false }\r\n        if (reset) newState.selectedPlan = null\r\n        setState(newState)\r\n    }\r\n\r\n    const handlePayPlan = () => {\r\n        if (whitelist.privateSale.length > 0) {\r\n            history.push(InvestPath)\r\n        } else {\r\n            setState({ ...state, paying: true })\r\n            buyPrivateSale(planCompromised, async (err, message, data) => {\r\n                if (err) {\r\n                    setState({ ...state, paying: false })\r\n                    console.log({ err })\r\n                } else {\r\n                    const { from, to, transactionHash } = data\r\n\r\n                    await updateWhitelist({\r\n                        privateSale: [\r\n                            new Date().getTime(),\r\n                            from,\r\n                            to,\r\n                            transactionHash,\r\n                            planCompromised.amount,\r\n                            planCompromised.tokens,\r\n                        ],\r\n                    })\r\n\r\n                    history.push(InvestPath)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    if (\r\n        !account ||\r\n        !fetchWhiteList.alreadyRequest ||\r\n        (fetchWhiteList.alreadyRequest &&\r\n            alreadyRequest &&\r\n            !fetchWhiteList.whiteList)\r\n    ) {\r\n        return (\r\n            <div className=\"mx-5\" style={{ height: 'calc(100vh - 109.13px)' }}>\r\n                <PageLoading />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"mx-5\" style={{ height: 'calc(100vh - 109.13px)' }}>\r\n            <ModalCompromisePackage\r\n                visible={visible}\r\n                onClose={handleOnCloseModal}\r\n                {...selectedPlan}\r\n            />\r\n            <div className=\"max-w-960px mx-auto mt-12\">\r\n                {!alreadyRequest ? (\r\n                    <CardContainer className=\"px-12 pt-8 pb-6\">\r\n                        <FormPrivateSale account={account} />\r\n                    </CardContainer>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        {!planCompromised ? (\r\n                            <div className=\"grid grid-cols-3 gap-4\">\r\n                                {stakingLvlsPrivate.map((s) => {\r\n                                    const { title, subtitle, properties } = s\r\n                                    return (\r\n                                        <CardCompromisePlan\r\n                                            key={`package-${title}`}\r\n                                            title={title}\r\n                                            subtitle={subtitle}\r\n                                            properties={properties}\r\n                                            onClick={() =>\r\n                                                handleSelectPackage(s)\r\n                                            }\r\n                                            verified={whitelist.verified}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"w-11/12 md:w-5/12 lg:w-4/12 mx-auto\">\r\n                                <CardReservePlan\r\n                                    title={planCompromised.title}\r\n                                    subtitle={planCompromised.subtitle}\r\n                                    properties={planCompromised.properties}\r\n                                    onClick={handlePayPlan}\r\n                                    paid={whitelist.privateSale.length > 0}\r\n                                    loading={paying}\r\n                                    // lock\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </React.Fragment>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrivateSaleView\r\n"],"sourceRoot":""}